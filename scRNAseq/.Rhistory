pheatmap(mat, breaks=seq(from=-thr, to=thr, length=101),
cluster_col=FALSE)
topGenes <- head(order(resTC$padj),50)
mat <- betas[topGenes, -c(1,2)]
thr <- 3
mat[mat < -thr] <- -thr
mat[mat > thr] <- thr
pheatmap(mat, breaks=seq(from=-thr, to=thr, length=101),
cluster_col=FALSE)
as.numeric(tc$treatment)
rep(c(0,3,8), each=9)
ggplot(tc,
aes(x = rep(c(0,3,8), each=9), y = count, color = cell, group = cell)) +
geom_point() + geom_smooth(se = FALSE, method = "loess") + scale_y_log10() +
theme_bw() +
ggtitle("Time Course Expression of PDK4") +
labs(x="Time (days)", y="Gene Count") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text = element_text(size = 12),
plot.title = element_text(size = 14, hjust = 0.5, face = "bold"),
axis.text=element_text(size=12),
legend.title = element_text(size=12,face="bold"),
axis.title=element_text(size=12, face="bold"),
legend.position = "bottom")
tc <- plotCounts(ddsTC, which.max(resTC$padj),
intgroup = c("treatment","cell"), returnData = TRUE)
ggplot(tc,
aes(x = rep(c(0,3,8), each=9), y = count, color = cell, group = cell)) +
geom_point() + geom_smooth(se = FALSE, method = "loess") + scale_y_log10() +
theme_bw() +
ggtitle("Time Course Expression of PDK4") +
labs(x="Time (days)", y="Gene Count") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text = element_text(size = 12),
plot.title = element_text(size = 14, hjust = 0.5, face = "bold"),
axis.text=element_text(size=12),
legend.title = element_text(size=12,face="bold"),
axis.title=element_text(size=12, face="bold"),
legend.position = "bottom")
ddsTC[which.max(resTC$padj),]
install.packages("mclust")
# devtools::install_github(repo = "satijalab/seurat", ref = "release/3.0")
# install.packages('Seurat')
devtools::install_version(package = 'Seurat', version = package_version('2.3.4'))
install.packages("Rtsne")
# devtools::install_github(repo = "satijalab/seurat", ref = "release/3.0")
# install.packages('Seurat')
devtools::install_version(package = 'Seurat', version = package_version('2.3.4'))
# devtools::install_github(repo = "satijalab/seurat", ref = "release/3.0")
# install.packages('Seurat')
devtools::install_version(package = 'Seurat', version = package_version('2.3.4'))
# devtools::install_github(repo = "satijalab/seurat", ref = "release/3.0")
# install.packages('Seurat')
devtools::install_version(package = 'Seurat', version = package_version('2.3.4'))
library(Seurat)
library(Matrix)
library(AnnotationDbi)
library("org.Hs.eg.db")
setwd('~/Documents/QuarantaLab/PC9/scRNAseq/')
# Read in hashing data
matrix_dir = "umi_count/"
barcode.path <- paste0(matrix_dir, "barcodes.tsv.gz")
features.path <- paste0(matrix_dir, "features.tsv.gz")
matrix.path <- paste0(matrix_dir, "matrix.mtx.gz")
mat <- readMM(file = matrix.path)
feature.names = read.delim(features.path, header = FALSE, stringsAsFactors = FALSE)
barcode.names = read.delim(barcode.path, header = FALSE, stringsAsFactors = FALSE)
colnames(mat) = barcode.names$V1
rownames(mat) = feature.names$V1
dat_HTO <- mat
# V3 only
# dat_HTO <- Read10X('umi_count/', gene.column=1)
# Read in scRNAseq data
matrix_dir_rna = "/Volumes/quaranta/Data/RNAseq/PC9_scRNAseq/outs/filtered_feature_bc_matrix/"
barcode.path_rna <- paste0(matrix_dir_rna, "barcodes.tsv.gz")
features.path_rna <- paste0(matrix_dir_rna, "features.tsv.gz")
matrix.path_rna <- paste0(matrix_dir_rna, "matrix.mtx.gz")
mat_rna <- readMM(file = matrix.path_rna)
feature.names_rna = read.delim(features.path_rna, header = FALSE, stringsAsFactors = FALSE)
barcode.names_rna = read.delim(barcode.path_rna, header = FALSE, stringsAsFactors = FALSE)
barcodes_raw = barcode.names_rna$V1
colnames(mat_rna) = sapply(barcodes_raw, function(x) strsplit(x, "-")[[1]][1],
USE.NAMES = F)
rownames(mat_rna) = feature.names_rna$V1
dat_expr <- mat_rna
# V3 only
# dat_expr <- Read10X('/Volumes/quaranta-1/Data/RNAseq/PC9_scRNAseq/outs/filtered_feature_bc_matrix/')
d <- as.data.frame(as.matrix(dat_expr))
d$SYMBOL <- mapIds(org.Hs.eg.db,keys=rownames(dat_expr),
column="SYMBOL",keytype="ENSEMBL",multiVals="first")
rownames(dat_expr) <- make.names(ifelse(is.na(d$SYMBOL),
rownames(dat_expr),
d$SYMBOL),
unique = TRUE)
# Keep only the same cell barcodes
joint_bcs <- intersect(colnames(dat_expr),colnames(dat_HTO))
dat_expr <- dat_expr[,joint_bcs]
dat_HTO <- as.matrix(dat_HTO[,joint_bcs])
# Setup Seurat object
dat_hashtag <- CreateSeuratObject(dat_expr, project = "PC9_hashing")
# Normalize RNA data with log normalization
dat_hashtag <- NormalizeData(dat_hashtag,display.progress = FALSE)
# Find and scale variable genes
dat_hashtag <- FindVariableGenes(dat_hashtag,do.plot = T,
display.progress = FALSE)
dat_hashtag <- ScaleData(dat_hashtag,
genes.use = dat_hashtag@var.genes,
display.progress = FALSE)
# Add hashtag count dataframe to assay data
dat_hashtag <- SetAssayData(dat_hashtag,
assay.type = "HTO",
slot = "raw.data",
new.data = dat_HTO)
# Use special normalization method to hashtag libraries
dat_hashtag <- NormalizeData(dat_hashtag,assay.type = "HTO",
normalization.method = "genesCLR",
display.progress = FALSE)
# Basically, add the HTO information to the GE matrix
dat_hashtag <- HTODemux(dat_hashtag,
assay.type = "HTO",
positive_quantile =  0.99,
print.output = FALSE)
# Some sanity checks for multiplets and hashtags
print (table(dat_hashtag@meta.data$hto_classification_global))
print (table(dat_hashtag@meta.data$hto_classification))
# Plotting hashtag representation for each hashtag library
dat_hashtag <- SetAllIdent(dat_hashtag,id = "hash_maxID")
library(Seurat)
library(Matrix)
library(AnnotationDbi)
library("org.Hs.eg.db")
setwd('~/Documents/QuarantaLab/PC9/scRNAseq/')
# Read in hashing data
matrix_dir = "umi_count/"
barcode.path <- paste0(matrix_dir, "barcodes.tsv.gz")
features.path <- paste0(matrix_dir, "features.tsv.gz")
matrix.path <- paste0(matrix_dir, "matrix.mtx.gz")
mat <- readMM(file = matrix.path)
feature.names = read.delim(features.path, header = FALSE, stringsAsFactors = FALSE)
barcode.names = read.delim(barcode.path, header = FALSE, stringsAsFactors = FALSE)
colnames(mat) = barcode.names$V1
rownames(mat) = feature.names$V1
dat_HTO <- mat
# V3 only
# dat_HTO <- Read10X('umi_count/', gene.column=1)
# Read in scRNAseq data
matrix_dir_rna = "/Volumes/quaranta/Data/RNAseq/PC9_scRNAseq/outs/filtered_feature_bc_matrix/"
barcode.path_rna <- paste0(matrix_dir_rna, "barcodes.tsv.gz")
features.path_rna <- paste0(matrix_dir_rna, "features.tsv.gz")
matrix.path_rna <- paste0(matrix_dir_rna, "matrix.mtx.gz")
mat_rna <- readMM(file = matrix.path_rna)
feature.names_rna = read.delim(features.path_rna, header = FALSE, stringsAsFactors = FALSE)
barcode.names_rna = read.delim(barcode.path_rna, header = FALSE, stringsAsFactors = FALSE)
barcodes_raw = barcode.names_rna$V1
colnames(mat_rna) = sapply(barcodes_raw, function(x) strsplit(x, "-")[[1]][1],
USE.NAMES = F)
rownames(mat_rna) = feature.names_rna$V1
dat_expr <- mat_rna
# V3 only
# dat_expr <- Read10X('/Volumes/quaranta-1/Data/RNAseq/PC9_scRNAseq/outs/filtered_feature_bc_matrix/')
d <- as.data.frame(as.matrix(dat_expr))
d$SYMBOL <- mapIds(org.Hs.eg.db,keys=rownames(dat_expr),
column="SYMBOL",keytype="ENSEMBL",multiVals="first")
rownames(dat_expr) <- make.names(ifelse(is.na(d$SYMBOL),
rownames(dat_expr),
d$SYMBOL),
unique = TRUE)
# Keep only the same cell barcodes
joint_bcs <- intersect(colnames(dat_expr),colnames(dat_HTO))
dat_expr <- dat_expr[,joint_bcs]
dat_HTO <- as.matrix(dat_HTO[,joint_bcs])
# Setup Seurat object
dat_hashtag <- CreateSeuratObject(dat_expr, project = "PC9_hashing")
# Normalize RNA data with log normalization
dat_hashtag <- NormalizeData(dat_hashtag,display.progress = FALSE)
# Find and scale variable genes
dat_hashtag <- FindVariableGenes(dat_hashtag,do.plot = T,
display.progress = FALSE)
dat_hashtag <- ScaleData(dat_hashtag,
genes.use = dat_hashtag@var.genes,
display.progress = FALSE)
# Add hashtag count dataframe to assay data
dat_hashtag <- SetAssayData(dat_hashtag,
assay.type = "HTO",
slot = "raw.data",
new.data = dat_HTO)
# Use special normalization method to hashtag libraries
dat_hashtag <- NormalizeData(dat_hashtag,assay.type = "HTO",
normalization.method = "genesCLR",
display.progress = FALSE)
# Basically, add the HTO information to the GE matrix
dat_hashtag <- HTODemux(dat_hashtag,
assay.type = "HTO",
positive_quantile =  0.99,
print.output = FALSE)
# Some sanity checks for multiplets and hashtags
print (table(dat_hashtag@meta.data$hto_classification_global))
print (table(dat_hashtag@meta.data$hto_classification))
# Plotting hashtag representation for each hashtag library
dat_hashtag <- SetAllIdent(dat_hashtag,id = "hash_maxID")
dat_hashtag <- SetAllIdent(dat_hashtag,"hto_classification_global")
dat_hashtag_subset <- SubsetData(dat_hashtag,ident.remove = "Negative")
dat_hashtag <- SetAllIdent(dat_hashtag,id = "hto_classification_global")
dat_singlet <- SubsetData(dat_hashtag,ident.use = "Singlet")
# Select the top 1000 most variable genes
dat_singlet <- FindVariableGenes(dat_singlet,do.plot = F)
# Scaling RNA data, we only scale the variable genes here for efficiency
dat_singlet <- ScaleData(dat_singlet,genes.use = dat_singlet@var.genes,display.progress = FALSE)
# Run PCA
dat_singlet <- RunPCA(dat_singlet,pc.genes = dat_singlet@var.genes,pcs.print = 0)
PCAPlot(dat_singlet, group.by = "hto_classification")
# We select the top 10 PCs for clustering and tSNE
dat_singlet <- FindClusters(dat_singlet,reduction.type = "pca",dims.use = 1:10,print.output = F,resolution = 0.6)
dat_singlet <- RunTSNE(dat_singlet,reduction.use = "pca",dims.use = 1:10)
# Projecting singlet identities on TSNE visualization
TSNEPlot(dat_singlet,group.by = "hto_classification")
# Projecting singlet identities on UMAP visualization
dat_singlet <- RunUMAP(dat_singlet, reduction.use = "pca", dims.use = 1:10)
dat_singlet_clusters <- dat_singlet
old_tags <- c('HTO_A-GTCAACTCTTTAGCG',
'HTO_B-TGATGGCCTATTGGG',
'HTO_C-TTCCGCCTCTCTTTG',
'HTO_D-AGTAAGTTCAGCGTA',
'HTO_E-AAGTATCGTTTCGCA',
'HTO_F-GGTTGCCAGATGTCA',
'HTO_G-TGTCTTTCCTGCCAG',
'HTO_H-CTCCTCTGCAATTAC')
new_tags <- c('VU', 'MGH', 'BR1', 'DS3',
'DS6', 'DS7', 'DS8', 'DS9')
found <- match(dat_singlet_clusters@meta.data$hto_classification,
old_tags)
met <- data.frame(ifelse(is.na(found), dat_singlet_clusters@meta.data$hto_classification,
new_tags[found]), row.names = rownames(dat_singlet_clusters@meta.data))
names(met) <- "Population"
dat_singlet_clusters <- AddMetaData(dat_singlet_clusters,
met,
'Population')
marker_genes = list()
for (tag in seq(length(new_tags))) {
marker_dat <- FindMarkers(dat_singlet_clusters,
ident.1 = new_tags[tag],
ident.2 = NULL, only.pos = FALSE)
marker_dat$Population <- new_tags[tag]
marker_genes[[tag]] <- marker_dat
# print(new_tags[tag])
}
marker_gene_dat <- do.call(rbind, marker_genes)
new_tags
seq(length(new_tags))
for (tag in seq(length(new_tags))) {
# marker_dat <- FindMarkers(dat_singlet_clusters,
#                           ident.1 = new_tags[tag],
#                           ident.2 = NULL, only.pos = FALSE)
# marker_dat$Population <- new_tags[tag]
# marker_genes[[tag]] <- marker_dat
print(new_tags[tag])
}
head(dat_singlet_clusters@meta.data)
dat_singlet_clusters <- SetAllIdent(object = dat_singlet_clusters, id = "Population")
marker_genes = list()
for (tag in seq(length(new_tags))) {
marker_dat <- FindMarkers(dat_singlet_clusters,
ident.1 = new_tags[tag],
ident.2 = NULL, only.pos = FALSE)
marker_dat$Population <- new_tags[tag]
marker_genes[[tag]] <- marker_dat
print(new_tags[tag])
}
marker_gene_dat <- do.call(rbind, marker_genes)
headz(marker_gene_dat)
head(marker_gene_dat)
write.csv(marker_gene_dat, "marker_genes_hashing.csv")
new_tags
dat_hashtag_pars <- dat_hashtag
dat_hashtag_pars <- SubsetData(dat_hashtag_pars,ident.use = "Singlet")
dat_hashtag_pars <- SetAllIdent(dat_hashtag_pars,"hash_ID")
dat_hashtag_pars <- SubsetData(dat_hashtag_pars,ident.use = c('HTO_A-GTCAACTCTTTAGCG',
'HTO_B-TGATGGCCTATTGGG',
'HTO_C-TTCCGCCTCTCTTTG'))
# Select the top 1000 most variable genes
dat_hashtag_pars <- FindVariableGenes(dat_hashtag_pars,do.plot = F)
# Scaling RNA data, we only scale the variable genes here for efficiency
dat_hashtag_pars <- ScaleData(dat_hashtag_pars,genes.use = dat_hashtag_pars@var.genes,display.progress = FALSE)
# Run PCA
dat_hashtag_pars <- RunPCA(dat_hashtag_pars,pc.genes = dat_hashtag_pars@var.genes,pcs.print = 0)
tags_pars <- c("VU", "MGH", "BR1")
marker_genes_pars = list()
for (tag in seq(length(tags_pars))) {
marker_dat <- FindMarkers(dat_hashtag_pars,
ident.1 = tags_pars[tag],
ident.2 = NULL, only.pos = FALSE)
marker_dat$Population <- tags_pars[tag]
marker_genes[[tag]] <- marker_dat
print(tags_pars[tag])
}
marker_gene_dat_pars <- do.call(rbind, marker_genes_pars)
write.csv(marker_gene_dat_pars, "marker_genes_hashing_pars.csv")
old_tags_pars <- c('HTO_A-GTCAACTCTTTAGCG',
'HTO_B-TGATGGCCTATTGGG',
'HTO_C-TTCCGCCTCTCTTTG')
new_tags_pars <- c('VU', 'MGH', 'BR1')
found_pars <- match(dat_hashtag_pars@meta.data$hash_ID,
old_tags_pars)
met_pars <- data.frame(ifelse(is.na(found_pars), dat_hashtag_pars@meta.data$hash_ID,
new_tags_pars[found_pars]), row.names = rownames(dat_hashtag_pars@meta.data))
names(met_pars) <- "Population"
dat_hashtag_pars <- AddMetaData(dat_hashtag_pars,
met_pars,
'Population')
tags_pars <- c("VU", "MGH", "BR1")
marker_genes_pars = list()
for (tag in seq(length(tags_pars))) {
marker_dat <- FindMarkers(dat_hashtag_pars,
ident.1 = tags_pars[tag],
ident.2 = NULL, only.pos = FALSE)
marker_dat$Population <- tags_pars[tag]
marker_genes[[tag]] <- marker_dat
print(tags_pars[tag])
}
# Get DEGs for cell line version compared to other versions
dat_hashtag_pars <- SetAllIdent(object = dat_hashtag_pars, id = "Population")
tags_pars <- c("VU", "MGH", "BR1")
marker_genes_pars = list()
for (tag in seq(length(tags_pars))) {
marker_dat <- FindMarkers(dat_hashtag_pars,
ident.1 = tags_pars[tag],
ident.2 = NULL, only.pos = FALSE)
marker_dat$Population <- tags_pars[tag]
marker_genes[[tag]] <- marker_dat
print(tags_pars[tag])
}
marker_gene_dat_pars <- do.call(rbind, marker_genes_pars)
write.csv(marker_gene_dat_pars, "marker_genes_hashing_pars.csv")
dat_hashtag_clones <- dat_hashtag
dat_hashtag_clones <- SubsetData(dat_hashtag_clones,ident.use = "Singlet")
dat_hashtag_clones <- SetAllIdent(dat_hashtag_clones,"hash_ID")
dat_hashtag_clones <- SubsetData(dat_hashtag_clones,
ident.use = c('HTO_D-AGTAAGTTCAGCGTA',
'HTO_E-AAGTATCGTTTCGCA',
'HTO_F-GGTTGCCAGATGTCA',
'HTO_G-TGTCTTTCCTGCCAG',
'HTO_H-CTCCTCTGCAATTAC'))
# Select the top 1000 most variable genes
dat_hashtag_clones <- FindVariableGenes(dat_hashtag_clones,do.plot = F)
# Scaling RNA data, we only scale the variable genes here for efficiency
dat_hashtag_clones <- ScaleData(dat_hashtag_clones,genes.use = dat_hashtag_clones@var.genes,display.progress = FALSE)
# Run PCA
dat_hashtag_clones <- RunPCA(dat_hashtag_clones,pc.genes = dat_hashtag_clones@var.genes,pcs.print = 0)
old_tags_clones <- c('HTO_D-AGTAAGTTCAGCGTA',
'HTO_E-AAGTATCGTTTCGCA',
'HTO_F-GGTTGCCAGATGTCA',
'HTO_G-TGTCTTTCCTGCCAG',
'HTO_H-CTCCTCTGCAATTAC')
new_tags_clones <- c('DS3', 'DS6', 'DS7', 'DS8', 'DS9')
found_clones <- match(dat_hashtag_clones@meta.data$hash_ID,
old_tags_clones)
met_clones <- data.frame(ifelse(is.na(found_clones), dat_hashtag_clones@meta.data$hash_ID,
new_tags_clones[found_clones]), row.names = rownames(dat_hashtag_clones@meta.data))
names(met_clones) <- "Population"
dat_hashtag_clones <- AddMetaData(dat_hashtag_clones,
met_clones,
'Population')
# Get DEGs for cell sublines compared to other sublines
dat_hashtag_clones <- SetAllIdent(object = dat_hashtag_clones, id = "Population")
tags_clones <- c("DS3", "DS6", "DS7", "DS8", "DS9")
marker_genes_clones = list()
for (tag in seq(length(tags_clones))) {
marker_dat <- FindMarkers(dat_hashtag_pars,
ident.1 = tags_clones[tag],
ident.2 = NULL, only.pos = FALSE)
marker_dat$Population <- tags_clones[tag]
marker_genes[[tag]] <- marker_dat
print(tags_clones[tag])
}
marker_gene_dat_clones <- do.call(rbind, marker_genes_clones)
write.csv(marker_gene_dat_clones, "marker_genes_hashing_clones.csv")
tags_clones <- c("DS3", "DS6", "DS7", "DS8", "DS9")
marker_genes_clones = list()
for (tag in seq(length(tags_clones))) {
marker_dat <- FindMarkers(dat_hashtag_clones,
ident.1 = tags_clones[tag],
ident.2 = NULL, only.pos = FALSE)
marker_dat$Population <- tags_clones[tag]
marker_genes[[tag]] <- marker_dat
print(tags_clones[tag])
}
marker_gene_dat_clones <- do.call(rbind, marker_genes_clones)
write.csv(marker_gene_dat_clones, "marker_genes_hashing_clones.csv")
marker_genes_clones
FindMarkers(dat_hashtag_pars,
ident.1 = "VU",
ident.2 = NULL, only.pos = FALSE)
seq(length(tags_pars))
tags_pars[1]
test <- FindMarkers(dat_hashtag_pars,
ident.1 = "VU",
ident.2 = NULL, only.pos = FALSE)
test$Population <- "VU"
test
dat_hashtag_pars <- SetAllIdent(object = dat_hashtag_pars, id = "Population")
tags_pars <- c("VU", "MGH", "BR1")
marker_genes_pars = list()
for (tag in seq(length(tags_pars))) {
marker_dat <- FindMarkers(dat_hashtag_pars,
ident.1 = tags_pars[tag],
ident.2 = NULL, only.pos = FALSE)
marker_dat$Population <- tags_pars[tag]
marker_genes_pars[[tag]] <- marker_dat
# print(tags_pars[tag])
}
marker_gene_dat_pars <- do.call(rbind, marker_genes_pars)
write.csv(marker_gene_dat_pars, "marker_genes_hashing_pars.csv")
dat_hashtag_clones <- SetAllIdent(object = dat_hashtag_clones, id = "Population")
tags_clones <- c("DS3", "DS6", "DS7", "DS8", "DS9")
marker_genes_clones = list()
for (tag in seq(length(tags_clones))) {
marker_dat <- FindMarkers(dat_hashtag_clones,
ident.1 = tags_clones[tag],
ident.2 = NULL, only.pos = FALSE)
marker_dat$Population <- tags_clones[tag]
marker_genes_clones[[tag]] <- marker_dat
# print(tags_clones[tag])
}
marker_gene_dat_clones <- do.call(rbind, marker_genes_clones)
write.csv(marker_gene_dat_clones, "marker_genes_hashing_clones.csv")
# Do GO analysis on relevant genes...for cell line versions and sublines
save(marker_gene_dat_clones, marker_gene_dat_pars, file = "scDEG_markerGenes.RData")
library(enrichR)
dbs <- listEnrichrDbs()
dbs <- c("GO_Molecular_Function_2018", "GO_Cellular_Component_2018", "GO_Biological_Process_2018")
### START here - get genes associated with each class ###
samples <- list("VU" = rownames(subset(marker_gene_dat_pars, Population == "VU")),
"MGH" = rownames(subset(marker_gene_dat_pars, Population == "MGH")),
"BR1" = rownames(subset(marker_gene_dat_pars, Population == "BR1")),
"DS3" = rownames(subset(marker_gene_dat_clones, Population == "DS3")),
"DS6" = rownames(subset(marker_gene_dat_clones, Population == "DS6")),
"DS7" = rownames(subset(marker_gene_dat_clones, Population == "DS7")),
"DS8" = rownames(subset(marker_gene_dat_clones, Population == "DS8")),
"DS9" = rownames(subset(marker_gene_dat_clones, Population == "DS9")))
GO_df_DEG <- list()
i = 1
for (s in samples) {
# print(names(samples)[i])
enriched <- enrichr(s, dbs)
bp <- enriched[["GO_Biological_Process_2018"]]
cc <- enriched[["GO_Cellular_Component_2018"]]
mf <- enriched[["GO_Molecular_Function_2018"]]
bp$Sample = names(samples)[i]
cc$Sample = names(samples)[i]
mf$Sample = names(samples)[i]
bp$GOtype <- "bp"
cc$GOtype <- "cc"
mf$GOtype <- "mf"
GO_samp <- rbind(bp, cc, mf)
GO_df_DEG[[names(samples)[i]]] <- GO_samp
i = i + 1
}
allGO_data_DEG = do.call(rbind, GO_df_DEG)
allGO_data_DEG$logp <- -log10(allGO_data_DEG$P.value)
allGO_DEG_pars <- subset(allGO_data_DEG, Sample %in% c("VU", "MGH", "BR1"))
allGO_DEG_clones <- subset(allGO_data_DEG, Sample %in% c("DS3", "DS6", "DS7", "DS8", "DS9"))
## Plot top 5 GO terms by p-value for each GO type (faceted) for each sample ##
library(dplyr)
# Parentals
allGO_DEG_pars_sub <- as.data.frame(allGO_DEG_pars %>%
group_by(GOtype, Sample) %>%
top_n(n = 5, wt = logp))
allGO_DEG_pars_sub <- distinct(allGO_DEG_pars_sub,Term, .keep_all= TRUE)
# allGO_pars_sub_orderedGOlogP <- allGO_pars_sub %>% arrange(GOtype, Sample, desc(-logp))
allGO_DEG_pars_sub_orderedGOlogP <- allGO_DEG_pars_sub %>% arrange(GOtype, Sample, desc(-logp)) %>%
mutate(Term=factor(Term, reorder(Term, logp)))
ggplot(allGO_DEG_pars_sub_orderedGOlogP, aes(y = logp, x = Term, color = Sample, fill = Sample)) +
geom_bar(stat = "identity", color = "black")  + coord_flip() + theme_bw() +
scale_fill_manual(values = c("red", "green", "blue")) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "right",
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12)) +
ggsave("GO_scDEG_parentals.pdf", width = 15, height = 10)
# Clones
allGO_DEG_clones_sub <- as.data.frame(allGO_DEG_clones %>%
group_by(GOtype, Sample) %>%
top_n(n = 5, wt = logp))
allGO_DEG_clones_sub <- distinct(allGO_DEG_clones_sub,Term, .keep_all= TRUE)
# allGO_clones_sub_orderedGOlogP <- allGO_clones_sub %>% arrange(GOtype, Sample, desc(-logp))
allGO_DEG_clones_sub_orderedGOlogP <- allGO_DEG_clones_sub %>% arrange(GOtype, Sample, desc(-logp)) %>%
mutate(Term=factor(Term, reorder(Term, logp)))
ggplot(allGO_DEG_clones_sub_orderedGOlogP, aes(y = logp, x = Term, color = Sample, fill = Sample)) +
geom_bar(stat = "identity", color = "black")  + coord_flip() + theme_bw() +
scale_fill_manual(values = c("brown", "deeppink", "darkorchid", "seagreen", "gold")) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "right",
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12)) +
ggsave("GO_scDEG_clones.pdf", width = 15, height = 15)
c(1,2,2,3,4)
list(1,2,3,4,5)
c(1,2,3,4,5)
x<-c(1,2,3,4,5)
names(x) = c("a", "b", "c", "d", "e")
x
library(vcfR)
library(UpSetR)
sessionInfo()
library(SNPRelate)
sessionInfo()
library(enrichR)
sessionInfo()
