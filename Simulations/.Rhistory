updateR(admin_password = 'CHayfor19')
install.packages(as.vector(needed_packages))
version
source("https://bioconductor.org/biocLite.R")
biocLite("DropletUtils")
set.seed(1000)
mol.info.file <- DropletUtils:::sim10xMolInfo(tempfile())
mol.info.file
mol.info <- read10xMolInfo(mol.info.file)
mol.info
library(DropletUtils)
mol.info <- read10xMolInfo(mol.info.file)
mol.info
set.seed(100)
no.sampling <- downsampleReads(mol.info.file, prop=1)
sum(no.sampling)
with.sampling <- downsampleReads(mol.info.file, prop=0.5)
sum(with.sampling)
mol.info.file1 = '/Users/Corey/Downloads/molecule_info.h5'
mol.info1 <- read10xMolInfo(mol.info.file1)
mol.info1
set.seed(100)
no.sampling1 <- downsampleReads(mol.info.file1, prop=1)
sum(no.sampling1)
no.sampling_ds <- downsampleReads(mol.info.file1, prop = 0.1)
sum(no.sampling_ds)
sessionInfo()
library(Seurat)
control.data <- Read10X(data.dir = "/Volumes/quaranta/Data/RNAseq/SKMEL5_scRNAseq/Counts/1614-1/filtered_gene_bc_matrices/hg19/")
control.data <- Read10X(data.dir = "/Volumes/quaranta/Data/RNAseq/SKMEL5_scRNAseq/Counts/1614-1/filtered_gene_bc_matrices/hg19/")
control.data <- Read10X(data.dir = "/Volumes/quaranta/Data/RNAseq/SKMEL5_scRNAseq/Counts/1614-1/filtered_gene_bc_matrices/hg19/")
library(org.Hs.eg.db)
library(clusterProfiler)
load(file="untreatedIdling_DEA.RData")
OrgDB <- org.Hs.eg.db
geneList <- as.vector(results_0to8d$log2FoldChange)
names(geneList) <- rownames(results_0to8d)
head(results_0to8d)
rownames(results_0to8d[, results_0to8d$padj<0.05 & results_0to8d$log2FoldChange > 2])
head(results_0to8d[, results_0to8d$padj<0.05 & results_0to8d$log2FoldChange > 2])
results_0to8d$padj<0.05
results_0to8d$log2FoldChange>2
results_0to8d$padj<0.05 & results_0to8d$log2FoldChange>2
upreg_genes <- subset(results_0to8d, padj<0.05 & log2FoldChange>2)
head(upreg_genes)
dim(upreg_genes)
downreg_genes <-subset(results_0to8d, padj<0.05 & log2FoldChange<2)
genes_up <- as.vector(rownames(upreg_genes))
genes_down <- as.vector(rownames(downreg_genes))
# Group GO
ggo <- clusterProfiler::groupGO(gene     = genes_up,
OrgDb    = OrgDB,
ont      = "BP",
level    = 3,
readable = TRUE)
# names(geneList) <- rownames(results_0to8d)
genes_up_ENTREZID <- bitr(genes_up, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = OrgDB)
head(genes_up_ENTREZID)
# names(geneList) <- rownames(results_0to8d)
genes_up_ENTREZID <- bitr(genes_up, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = OrgDB)$ENTREZID
head(genes_up_ENTREZID)
# Group GO
ggo <- clusterProfiler::groupGO(gene     = genes_up_ENTREZID,
OrgDb    = OrgDB,
ont      = "BP",
level    = 3,
readable = TRUE)
head(summary(ggo)[,-5])
summary(ggo)
head(as.data.frame(ggo)[,-5])
as.data.frame(ggo)
View(as.data.frame(ggo))
# names(geneList) <- rownames(results_0to8d)
genes_up_ENTREZID <- bitr(genes_up, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = OrgDB)$ENTREZID
genes_down_ENTREZID <- bitr(genes_down, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = OrgDB)$ENTREZID
ggo_down <- clusterProfiler::groupGO(gene = genes_down_ENTREZID,
OrgDb    = OrgDB,
ont      = "BP",
level    = 3,
readable = TRUE)
View(as.data.frame(ggo_down))
View(as.data.frame(ggo))
# Group GO
ggo_upreg_4 <- clusterProfiler::groupGO(gene     = genes_up_ENTREZID,
OrgDb    = OrgDB,
ont      = "BP",
level    = 4,
readable = TRUE)
View(as.data.frame(ggo_upreg_4))
# GO over-representation test
ego_genesUp <- clusterProfiler::enrichGO(gene          = genes_up_ENTREZID,
OrgDb         = OrgDb,
ont           = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
qvalueCutoff  = 0.05,
readable      = TRUE)
# GO over-representation test
ego_genesUp <- clusterProfiler::enrichGO(gene          = genes_up_ENTREZID,
OrgDb         = OrgDB,
ont           = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
qvalueCutoff  = 0.05,
readable      = TRUE)
View(as.data.frame(ego_genesUp))
ego_genesDown <- clusterProfiler::enrichGO(gene  = genes_down_ENTREZID,
OrgDb         = OrgDB,
ont           = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
qvalueCutoff  = 0.05,
readable      = TRUE)
View(as.data.frame(ego_genesDown))
ego_GSEA_up <- gseGO(geneList = genes_up_ENTREZID,
OrgDb        = OrgDB,
ont          = "BP",
nPerm        = 1000,
minGSSize    = 100,
maxGSSize    = 500,
pvalueCutoff = 0.05,
verbose      = FALSE)
kk_genesUp <- enrichKEGG(gene = genes_up_ENTREZID,
organism = 'hsa',
pvalueCutoff = 0.05)
View(kk_genesUp)
head(kk_genesUp)
kk_genesUp
View)as.data.frame(kk_genesUp))
View(as.data.frame(kk_genesUp))
kk_genesDown <- enrichKEGG(gene = genes_down_ENTREZID,
organism = 'hsa',
pvalueCutoff = 0.05)
View(as.data.frame(kk_genesDown))
barplot(ggo, drop=TRUE, showCategory=12)
dotplot(ego_genesUp)
dotplot(ego_genesDown)
plotGOgraph(ego_genesUp)
emapplot(ego_genesUp)
emapplot(ego_genesDown)
cnetplot(ego, categorySize="pvalue", foldChange=genes_up_ENTREZID)
cnetplot(ego_genesUp, categorySize="pvalue", foldChange=genes_up_ENTREZID)
head(ego_genesUp)
data(geneList, package="DOSE")
head(geneList)
cnetplot(ego, categorySize="pvalue", foldChange=geneList)
geneList_up <- as.vector(upreg_genes$log2FoldChange)
names(geneList_up) <- rownames(upreg_genes)
cnetplot(ego_genesUp, categorySize="pvalue", foldChange=geneList_up)
geneList_down <- as.vector(downreg_genes$log2FoldChange)
names(geneList_down) <- rownames(downreg_genes)
cnetplot(ego_genesDown, categorySize="pvalue", foldChange=geneList_down)
cnetplot(ego_genesUp, categorySize="pvalue", foldChange=geneList_up)
dotplot(ego_genesUp)
dotplot(ggo)
barplot(ggo)
ggo_up <- clusterProfiler::groupGO(gene     = genes_up_ENTREZID,
OrgDb    = OrgDB,
ont      = "BP",
level    = 4,
readable = TRUE)
barplot(ggo_up)
# Group GO
ggo_up <- clusterProfiler::groupGO(gene     = genes_up_ENTREZID,
OrgDb    = OrgDB,
ont      = "BP",
level    = 3,
readable = TRUE)
dotplot(ggo_up)
barplot(ggo_up)
barplot(ggo_down)
ego_GSEA_up <- gseGO(geneList = geneList_up,
OrgDb        = OrgDB,
ont          = "BP",
nPerm        = 1000,
minGSSize    = 100,
maxGSSize    = 500,
pvalueCutoff = 0.05,
verbose      = FALSE)
View(as.data.frame(ggo_up))
ggo_up_df <- as.data.frame(ggo_up)
ggo_up_df <- ggo_up_df[order(-count)]
ggo_up_df <- ggo_up_df[order(-Count)]
str(ggo_up_df)
ggo_up_df <- ggo_up_df[order(-Count),]
ggo_up_df <- ggo_up_df[order(-ggo_up_df$Count),]
View(ggo_up_df)
barplot(ggo_up, order=T)
dotplot(ego_genesUp)
dotplot(ego_genesUp, order=T)
emapplot(ego_genesUp)
cnetplot(ego_genesUp, categorySize="pvalue", foldChange=genes_up_ENTREZID)
cnetplot(ego_genesUp, categorySize="pvalue", foldChange=geneList_up)
barplot(ggo_up, order=T, showCategory=25)
barplot(ggo_up, order=T, showCategory=10)
barplot(ggo_down, order=T, showCategory=10)
dotplot(ego_genesUp) + ggtitle("GO Over-representation Upregulated Genes") +
labs(x="Gene Ratio", y="GO Terms") +
theme(legend.text = element_text(size = 12),
plot.title = element_text(size = 14, hjust = 0.5, face = "bold"),
axis.text=element_text(size=12),
legend.title = element_text(size=12,face="bold"),
axis.title=element_text(size=12, face="bold"))
library(ggplot2)
dotplot(ego_genesUp) + ggtitle("GO Over-representation Upregulated Genes") +
labs(x="Gene Ratio", y="GO Terms") +
theme(legend.text = element_text(size = 12),
plot.title = element_text(size = 14, hjust = 0.5, face = "bold"),
axis.text=element_text(size=12),
legend.title = element_text(size=12,face="bold"),
axis.title=element_text(size=12, face="bold"))
dotplot(ego_genesDown) +
+ ggtitle("GO Over-representation Downregulated Genes") +
labs(x="Gene Ratio", y="GO Terms") +
theme(legend.text = element_text(size = 12),
plot.title = element_text(size = 14, hjust = 0.5, face = "bold"),
axis.text=element_text(size=12),
legend.title = element_text(size=12,face="bold"),
axis.title=element_text(size=12, face="bold"))
dotplot(ego_genesDown) + ggtitle("GO Over-representation Downregulated Genes") +
labs(x="Gene Ratio", y="GO Terms") +
theme(legend.text = element_text(size = 12),
plot.title = element_text(size = 14, hjust = 0.5, face = "bold"),
axis.text=element_text(size=12),
legend.title = element_text(size=12,face="bold"),
axis.title=element_text(size=12, face="bold"))
emapplot(ego_genesUp)
emapplot(ego_genesDown)
cnetplot(ego_genesUp, categorySize="pvalue", foldChange=geneList_up)
dim(geneList_down)
geneList_down <- as.vector(downreg_genes$log2FoldChange)
dim(geneList_down)
head(geneList_down)
length(geneList_down)
length(geneList_up)
dim(upreg_genes)
dim(downreg_genes)
names(geneList_down) <- rownames(downreg_genes)
dim(geneList_down)
head(geneList_down)
cnetplot(ego_genesDown, categorySize="pvalue", foldChange=geneList_down)
emapplot(ego_genesUp)
emapplot(ego_genesDown)
cnetplot(ego_genesUp, categorySize="pvalue", foldChange=geneList_up)
geneList_all <- as.vector(results_0to8d$log2FoldChange)
names(geneList_all) <- rownames(results_0to8d)
geneList_all <- as.vector(results_0to8d$log2FoldChange)
names(geneList_all) <- rownames(results_0to8d)
head(geneList_all)
a <- names(geneList_all)
genes_ENTREZID <- bitr(a, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = OrgDB)$ENTREZID
names(geneList_all) <- genes_ENTREZID
gene_df <- data.frame(Entrez=names(geneList_all), FC=geneList_all)
gene_df <- gene_df[abs(gene_df$FC) > 2,]
gene_df$group <- "upregulated"
hist(gene_df$FC)
gene_df$group[gene_df$FC < 0] <- "downregulated"
formula_res <- compareCluster(Entrez~group, data=gene_df, fun="enrichKEGG")
gene_df$othergroup <- "A"
gene_df$othergroup[abs(gene_df$FC) > 2] <- "B"
formula_res <- compareCluster(Entrez~group+othergroup, data=gene_df, fun="enrichKEGG")
head(as.data.frame(formula_res))
dim(genes_down)
dim(genes_down_ENTREZID)
length(genes_down)
length(genes_up)
browseVignettes("rnaseqgene")
browseVignettes("rnaseqGene")
library(fission)
data("fission")
head(fission)
fission$strain
fission$minute
fission$replicate
fission$id
head(dds)
head(assay(fission))
library(biomaRt)
d <- read.csv("featureCounts_matrix_all.csv", header=T, sep=",")
#Rename columns
cols <- c("ensembl_gene_id", "SC01_day0_rep1", "SC01_day0_rep2", "SC01_day0_rep3",
"SC01_day3_rep1", "SC01_day3_rep2", "SC01_day3_rep3",
"SC01_day8_rep1", "SC01_day8_rep2", "SC01_day8_rep3",
"SC07_day0_rep1", "SC07_day0_rep2", "SC07_day0_rep3",
"SC07_day3_rep1", "SC07_day3_rep2", "SC07_day3_rep3",
"SC07_day8_rep1", "SC07_day8_rep2", "SC07_day8_rep3",
"SC10_day0_rep1", "SC10_day0_rep2", "SC10_day0_rep3",
"SC10_day3_rep1", "SC10_day3_rep2", "SC10_day3_rep3",
"SC10_day8_rep1", "SC10_day8_rep2", "SC10_day8_rep3")
names(d) <- cols
ensembl <- useMart("ensembl")
mart <- useDataset("hsapiens_gene_ensembl", mart = ensembl)
genes <- d$ensembl_gene_id
G_list <- getBM(attributes= c("ensembl_gene_id","hgnc_symbol"),
filters= "ensembl_gene_id",
values=genes,
mart=mart)
GE_data <- merge(d, G_list, by = "ensembl_gene_id")
d <- GE_data[, -1]
d <- d[c(28, seq(1:27))]
rownames(d) <- make.names(d$hgnc_symbol, unique = T)
d <- d[, 2:28]
countdata <- d
# baseline <- c(1,2,3,10,11,12,19,20,21)
# treat3d  <- c(4,5,6,13,14,15,22,23,24)
# treat8d  <- c(7,8,9,16,17,18,25,26,27)
# # define the groups by subclones
# sc01 <- c(baseline[1:3], treat3d[1:3], treat8d[1:3])
# sc07 <- c(baseline[4:6], treat3d[4:6], treat8d[4:6])
# sc10 <- c(baseline[7:9], treat3d[7:9], treat8d[7:9])
# # Get the countdata specific to conditions:
# # countdata <- countdata[,c(baseline)]
# rownames(countdata) <- d[,"ensembl_gene_id"]
head(countdata)
nrow(countdata)
ncol(countdata)
condition <- c("0", "3", "8")
treatment <- rep(condition, each=3) # Three biological replicates
unique(treatment)
cell <- c("SC01", "SC07","SC10") #sublines used for the analysis
cellName <- rep(cell, each=3)
coldata <- data.frame(cell=rep(cellName), treatment=rep(treatment, each=3))
group = factor(paste(coldata$cell, coldata$treatment, sep="."))
coldata$group = group
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = countdata,
colData = coldata,
design = ~ cell + treatment + cell:treatment)
dds
nrow(dds); ncol(dds)
dds$cell
dds$treatment
dds$group
ddsTC <- DESeq(dds, test="LRT", reduced = ~ cell + treatment)
resTC <- results(ddsTC)
resTC$symbol <- mcols(ddsTC)$symbol
head(resTC[order(resTC$padj),], 4)
tc <- plotCounts(ddsTC, which.min(resTC$padj),
intgroup = c("treatment","cell"), returnData = TRUE)
ggplot(tc,
aes(x = as.numeric(treatment), y = count, color = cell, group = cell)) +
geom_point() + geom_smooth(se = FALSE, method = "loess") + scale_y_log10()
warnings()
head(tc)
as.numeric(tc$treatment)
head(resTC)
which.min(resTC$padj)
ddsTC[which.min(resTC$padj),]
tc
resultsNames(ddsTC)
betas <- coef(ddsTC)
colnames(betas)
topGenes <- head(order(resTC$padj),20)
mat <- betas[topGenes, -c(1,2)]
thr <- 3
mat[mat < -thr] <- -thr
mat[mat > thr] <- thr
pheatmap(mat, breaks=seq(from=-thr, to=thr, length=101),
cluster_col=FALSE)
library(gplots)
topGenes <- head(order(resTC$padj),20)
mat <- betas[topGenes, -c(1,2)]
thr <- 3
mat[mat < -thr] <- -thr
mat[mat > thr] <- thr
pheatmap(mat, breaks=seq(from=-thr, to=thr, length=101),
cluster_col=FALSE)
library(pheatmap)
topGenes <- head(order(resTC$padj),20)
mat <- betas[topGenes, -c(1,2)]
thr <- 3
mat[mat < -thr] <- -thr
mat[mat > thr] <- thr
pheatmap(mat, breaks=seq(from=-thr, to=thr, length=101),
cluster_col=FALSE)
topGenes <- head(order(resTC$padj),100)
mat <- betas[topGenes, -c(1,2)]
thr <- 3
mat[mat < -thr] <- -thr
mat[mat > thr] <- thr
pheatmap(mat, breaks=seq(from=-thr, to=thr, length=101),
cluster_col=FALSE)
topGenes <- head(order(resTC$padj),50)
mat <- betas[topGenes, -c(1,2)]
thr <- 3
mat[mat < -thr] <- -thr
mat[mat > thr] <- thr
pheatmap(mat, breaks=seq(from=-thr, to=thr, length=101),
cluster_col=FALSE)
as.numeric(tc$treatment)
rep(c(0,3,8), each=9)
ggplot(tc,
aes(x = rep(c(0,3,8), each=9), y = count, color = cell, group = cell)) +
geom_point() + geom_smooth(se = FALSE, method = "loess") + scale_y_log10() +
theme_bw() +
ggtitle("Time Course Expression of PDK4") +
labs(x="Time (days)", y="Gene Count") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text = element_text(size = 12),
plot.title = element_text(size = 14, hjust = 0.5, face = "bold"),
axis.text=element_text(size=12),
legend.title = element_text(size=12,face="bold"),
axis.title=element_text(size=12, face="bold"),
legend.position = "bottom")
tc <- plotCounts(ddsTC, which.max(resTC$padj),
intgroup = c("treatment","cell"), returnData = TRUE)
ggplot(tc,
aes(x = rep(c(0,3,8), each=9), y = count, color = cell, group = cell)) +
geom_point() + geom_smooth(se = FALSE, method = "loess") + scale_y_log10() +
theme_bw() +
ggtitle("Time Course Expression of PDK4") +
labs(x="Time (days)", y="Gene Count") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text = element_text(size = 12),
plot.title = element_text(size = 14, hjust = 0.5, face = "bold"),
axis.text=element_text(size=12),
legend.title = element_text(size=12,face="bold"),
axis.title=element_text(size=12, face="bold"),
legend.position = "bottom")
ddsTC[which.max(resTC$padj),]
install.packages("mclust")
# devtools::install_github(repo = "satijalab/seurat", ref = "release/3.0")
# install.packages('Seurat')
devtools::install_version(package = 'Seurat', version = package_version('2.3.4'))
install.packages("Rtsne")
# devtools::install_github(repo = "satijalab/seurat", ref = "release/3.0")
# install.packages('Seurat')
devtools::install_version(package = 'Seurat', version = package_version('2.3.4'))
# devtools::install_github(repo = "satijalab/seurat", ref = "release/3.0")
# install.packages('Seurat')
devtools::install_version(package = 'Seurat', version = package_version('2.3.4'))
# devtools::install_github(repo = "satijalab/seurat", ref = "release/3.0")
# install.packages('Seurat')
devtools::install_version(package = 'Seurat', version = package_version('2.3.4'))
### Plot MGM and PGM parameter scans ###
library(ggplot2)
tile <- read.csv('all_cellLine_tile.csv')
# Remove DS8 - only fit Polyclonal Growth Model (PGM - see below)
## Leaves only Monoclonal Growth Model (MGM) comparisons
tile_new <- subset(tile, !cell.line == "PC9.DS8")
# Set color and labels
cols_PS <- c("not.assigned" = "grey90", "PC9.DS1" = "coral", "PC9.DS3" = "brown",
"PC9.DS4" = "deepskyblue", "PC9.DS6" = "deeppink", "PC9.DS7" = "darkorchid",
"PC9.DS9" = "gold")
pops_PS <- c("not.assigned", "PC9.DS1", "PC9.DS3", "PC9.DS4",
"PC9.DS6","PC9.DS7", "PC9.DS9")
labs_PS <- c("Not Assigned", "DS1", "DS3", "DS4", "DS6", "DS7", "DS9")
# Plot all parameter scans (excluding DS8) - not in paper
ggplot(tile_new) +
geom_tile(data = subset(tile_new, cell.line.new == 'PC9.DS1'),
aes(DIP.rate, division.rate, fill = cell.line.new, alpha = p.value), color = "coral") +
geom_tile(data = subset(tile_new, cell.line.new == 'PC9.DS3'),
aes(DIP.rate, division.rate, fill = cell.line.new, alpha = p.value), color = "brown") +
geom_tile(data = subset(tile_new, cell.line.new == 'PC9.DS4'),
aes(DIP.rate, division.rate, fill = cell.line.new, alpha = p.value), color = "deepskyblue") +
geom_tile(data = subset(tile_new, cell.line.new == 'PC9.DS6'),
aes(DIP.rate, division.rate, fill = cell.line.new, alpha = p.value), color = "deeppink") +
geom_tile(data = subset(tile_new, cell.line.new == 'PC9.DS7'),
aes(DIP.rate, division.rate, fill = cell.line.new, alpha = p.value), color = "darkorchid") +
geom_tile(data = subset(tile_new, cell.line.new == 'PC9.DS9'),
aes(DIP.rate, division.rate, fill = cell.line.new, alpha = p.value), color = "gold") +
theme_bw() +
scale_fill_manual(values = cols_PS,
breaks = pops_PS,
labels = labs_PS,
name = "Subline") +
scale_alpha_continuous(name = "p-value") +
xlab("DIP Rate") + ylab("Division Rate") +
theme(legend.text = element_text(size = 12), legend.position = "right",
plot.title = element_text(size = 12, hjust = 0.5, face = "bold"), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
setwd('~/git/GES_2020/Simulations/')
# Load all of parameter scan data
tile <- read.csv('all_cellLine_tile.csv')
# Remove DS8 - only fit Polyclonal Growth Model (PGM - see below)
## Leaves only Monoclonal Growth Model (MGM) comparisons
tile_new <- subset(tile, !cell.line == "PC9.DS8")
# Set color and labels
cols_PS <- c("not.assigned" = "grey90", "PC9.DS1" = "coral", "PC9.DS3" = "brown",
"PC9.DS4" = "deepskyblue", "PC9.DS6" = "deeppink", "PC9.DS7" = "darkorchid",
"PC9.DS9" = "gold")
pops_PS <- c("not.assigned", "PC9.DS1", "PC9.DS3", "PC9.DS4",
"PC9.DS6","PC9.DS7", "PC9.DS9")
labs_PS <- c("Not Assigned", "DS1", "DS3", "DS4", "DS6", "DS7", "DS9")
# Plot all parameter scans (excluding DS8) - not in paper
ggplot(tile_new) +
geom_tile(data = subset(tile_new, cell.line.new == 'PC9.DS1'),
aes(DIP.rate, division.rate, fill = cell.line.new, alpha = p.value), color = "coral") +
geom_tile(data = subset(tile_new, cell.line.new == 'PC9.DS3'),
aes(DIP.rate, division.rate, fill = cell.line.new, alpha = p.value), color = "brown") +
geom_tile(data = subset(tile_new, cell.line.new == 'PC9.DS4'),
aes(DIP.rate, division.rate, fill = cell.line.new, alpha = p.value), color = "deepskyblue") +
geom_tile(data = subset(tile_new, cell.line.new == 'PC9.DS6'),
aes(DIP.rate, division.rate, fill = cell.line.new, alpha = p.value), color = "deeppink") +
geom_tile(data = subset(tile_new, cell.line.new == 'PC9.DS7'),
aes(DIP.rate, division.rate, fill = cell.line.new, alpha = p.value), color = "darkorchid") +
geom_tile(data = subset(tile_new, cell.line.new == 'PC9.DS9'),
aes(DIP.rate, division.rate, fill = cell.line.new, alpha = p.value), color = "gold") +
theme_bw() +
scale_fill_manual(values = cols_PS,
breaks = pops_PS,
labels = labs_PS,
name = "Subline") +
scale_alpha_continuous(name = "p-value") +
xlab("DIP Rate") + ylab("Division Rate") +
theme(legend.text = element_text(size = 12), legend.position = "right",
plot.title = element_text(size = 12, hjust = 0.5, face = "bold"), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
