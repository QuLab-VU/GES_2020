geom_density(alpha=.1, size = 1) +
geom_density(data = VU_DIP, alpha = 0.25, size = 1,
aes(x=DIP, fill=Line, color=Line)) +
geom_density(data = DS8_DIP, alpha = 0.25, size = 1,
aes(x=DIP, fill=Line, colour=Line)) +
theme_bw() +
geom_text(data=annotation, aes(x=x, y=y, label=label),
inherit.aes=FALSE, parse = FALSE, size = 5) +
scale_color_manual(values = c("grey50", "grey50", "grey50",
"grey50", "grey50", "seagreen",
"grey50", "blue"),
labels = c("DS1", "DS3", "DS4", "DS6",
"DS7", "DS8", "DS9", "VU")) +
scale_fill_manual(values = c("grey50", "grey50", "grey50",
"grey50", "grey50", "seagreen",
"grey50", "blue"),
labels = c("DS1", "DS3", "DS4", "DS6",
"DS7", "DS8", "DS9", "VU")) +
geom_vline(xintercept = 0, size = 1, colour = "black",
linetype = "dashed") +
labs(x = "DIP Rate", y = "Density") + xlim(-0.012, 0.018) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "right",
plot.title = element_text(size = 14, hjust = 0.5, face = "bold"), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12))
library(ggplot2)
library(ggpubr)
setwd('~/git/GES_2020/Simulations/')
# Load all of parameter scan data
tile_DS1 <- read.csv('DS1_expansionTest_tile_lowVal.csv')
tile_DS3 <- read.csv('DS3_expansionTest_tile_lowVal.csv')
tile_DS4 <- read.csv('DS4_expansionTest_tile_lowVal.csv')
tile_DS6 <- read.csv('DS6_expansionTest_tile_lowVal.csv')
tile_DS7 <- read.csv('DS7_expansionTest_tile_lowVal.csv')
tile_DS9 <- read.csv('DS9_expansionTest_tile_lowVal.csv')
tile_all <- rbind(tile_DS1, tile_DS3, tile_DS4,
tile_DS6, tile_DS7, tile_DS9)
# Set color and labels
cols_PS <- c("not.assigned" = "white", "PC9.DS1" = "coral", "PC9.DS3" = "brown",
"PC9.DS4" = "deepskyblue", "PC9.DS6" = "deeppink", "PC9.DS7" = "darkorchid",
"PC9.DS9" = "gold")
pops_PS <- c("not.assigned", "PC9.DS1", "PC9.DS3", "PC9.DS4",
"PC9.DS6", "PC9.DS7", "PC9.DS9")
labs_PS <- c("Not Assigned", "DS1", "DS3", "DS4", "DS6", "DS7", "DS9")
ggplot(tile_all) +
geom_tile(data = subset(tile_all, cell.line.new == 'PC9.DS1'),
aes(DIP.rate, division.rate, fill = cell.line.new),
alpha = 0.7, color = "black") +
geom_tile(data = subset(tile_all, cell.line.new == 'PC9.DS3'),
aes(DIP.rate, division.rate, fill = cell.line.new),
alpha = 0.7, color = "black") +
geom_tile(data = subset(tile_all, cell.line.new == 'PC9.DS4'),
aes(DIP.rate, division.rate, fill = cell.line.new),
alpha = 0.7, color = "black") +
geom_tile(data = subset(tile_all, cell.line.new == 'PC9.DS6'),
aes(DIP.rate, division.rate, fill = cell.line.new),
alpha = 0.7, color = "black") +
geom_tile(data = subset(tile_all, cell.line.new == 'PC9.DS7'),
aes(DIP.rate, division.rate, fill = cell.line.new),
alpha = 0.7, color = "black") +
geom_tile(data = subset(tile_all, cell.line.new == 'PC9.DS9'),
aes(DIP.rate, division.rate, fill = cell.line.new),
alpha = 0.7, color = "black") +
theme_bw() + ylim(0.01, 0.05) + xlim(-0.0020, 0.0040) +
scale_fill_manual(values = cols_PS,
breaks = pops_PS,
labels = labs_PS) +
xlab("DIP Rate") + ylab("Division Rate") +
theme(legend.text = element_text(size = 14), legend.position = "none",
legend.title = element_text(size=14),
axis.title=element_text(size=14), axis.text = element_text(size = 14),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
plt_scan_DS3_4 <- ggplot(tile_all) +
geom_tile(data = subset(tile_all, cell.line.new == 'PC9.DS3'),
aes(DIP.rate, division.rate, fill = cell.line.new),
alpha = 0.7, color = "black") +
geom_tile(data = subset(tile_all, cell.line.new == 'PC9.DS4'),
aes(DIP.rate, division.rate, fill = cell.line.new),
alpha = 0.7, color = "black") +
theme_bw() + ylim(0.01, 0.05) + xlim(-0.0020, 0.0040) +
scale_fill_manual(values = cols_PS,
breaks = pops_PS,
labels = labs_PS) +
xlab("DIP Rate") + ylab("Division Rate") +
theme(legend.text = element_text(size = 14), legend.position = "none",
legend.title = element_text(size=14),
axis.title=element_text(size=14), axis.text = element_text(size = 14),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
plt_scan_DS3_4
plt_scan_DS1_6_7_9 <- ggplot(tile_all) +
geom_tile(data = subset(tile_all, cell.line.new == 'PC9.DS1'),
aes(DIP.rate, division.rate, fill = cell.line.new),
alpha = 0.7, color = "black") +
geom_tile(data = subset(tile_all, cell.line.new == 'PC9.DS6'),
aes(DIP.rate, division.rate, fill = cell.line.new),
alpha = 0.7, color = "black") +
geom_tile(data = subset(tile_all, cell.line.new == 'PC9.DS7'),
aes(DIP.rate, division.rate, fill = cell.line.new),
alpha = 0.7, color = "black") +
geom_tile(data = subset(tile_all, cell.line.new == 'PC9.DS9'),
aes(DIP.rate, division.rate, fill = cell.line.new),
alpha = 0.7, color = "black") +
theme_bw() + ylim(0.01, 0.05) + xlim(-0.002, 0.0040) +
scale_fill_manual(values = cols_PS,
breaks = pops_PS,
labels = labs_PS) +
xlab("DIP Rate") + ylab("Division Rate") +
theme(legend.text = element_text(size = 14), legend.position = "none",
legend.title = element_text(size=14),
axis.title=element_text(size=14), axis.text = element_text(size = 14),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
plt_scan_DS1_6_7_9
library(ggplot2)
setwd('~/git/GES_2020/Simulations/')
## Read in DS8 PGM data
tile_DS8_expandedRange <- read.csv('DS8_twoState_tile_expandedRange_lowVal_forPaper.csv')
# Split data into two states
DS8_WR_state1 <- subset(tile_DS8_expandedRange, Cell.Line == 'PC9-DS8.1')
DS8_WR_state2 <- subset(tile_DS8_expandedRange, Cell.Line == 'PC9-DS8.2')
## Add parameter pair metadata (due to scan in 4D - two division and two
## death rates - this is used to handle parameter value overlaps)
DS8_WR_state1$Param.Pair <- as.character(seq(1:nrow(DS8_WR_state1)))
DS8_WR_state2$Param.Pair <- as.character(seq(1:nrow(DS8_WR_state2)))
## Bind dataframes together
DS8_WR <- rbind(DS8_WR_state1, DS8_WR_state2)
## Create modified dataframe that jitters data points
### Prevents parameter overlaps that lead to plotting issues
DS8_WR_df <- data.frame(
Cell.Line = DS8_WR$Cell.Line,
Param.Pair = as.numeric(DS8_WR$Param.Pair),
DIP.Rate = jitter(DS8_WR$DIP.Rate,2),
Division.Rate = jitter(DS8_WR$Division.Rate,2),
Death.Rate = jitter(DS8_WR$Death.Rate,2),
KS.value = DS8_WR$KS.val,
AD.value = DS8_WR$AD.val
)
DS8_WR_df <- subset(DS8_WR_df, AD.value > 0.05)
# New color-label pattern
cols_DS8 <- c("PC9-DS8.1" = "seagreen", "PC9-DS8.2" = "seagreen")
pops_DS8 <- c("PC9-DS8.1", "PC9-DS8.2")
labs_DS8 <- c("DS8 State 1", "DS8 State 2")
plt_DS8 <- ggplot(DS8_WR_df, aes(DIP.Rate, Division.Rate)) + #, fill = Cell.Line, group = as.factor(Param.Pair))) +
geom_point(aes(color = Cell.Line)) +
# geom_point(shape = 21, aes(color = as.factor(Param.Pair))) +
# geom_line() +
theme_bw() +
scale_color_manual(values = cols_DS8,
breaks = pops_DS8,
labels = labs_DS8,
name = "Subline") +
xlim(0, 0.008) + ylim(0, 0.08) +
xlab("Division Rate - Death Rate") + ylab("Division Rate") +
theme(legend.text = element_text(size = 14), legend.position = "none",
axis.text=element_text(size=14),
legend.title = element_text(size=14), axis.title=element_text(size=14),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
plt_DS8
tile_DS1
subset(tile_DS1, AD.val > 0.05)
dim(subset(tile_DS1, AD.val > 0.05))
subset(tile_DS1, AD.val > 0.05)[order(-AD.val),]
subset(tile_DS1, AD.val > 0.05)[order(-tile_DS1$AD.val),]
ee <- subset(tile_DS1, AD.val > 0.05)
ee
ee[order(ee$AD.val)]
ee[order(ee$AD.val),]
ee[order(-ee$AD.val),]
ff <- subset(tile_DS7, AD.val > 0.05)
ff[order(-ff$AD.val),]
dim(ff[order(-ff$AD.val),])
tile_xxx <- read.csv("testxxx.csv")
tile_xxx
gg <- subset(tile_xxx, AD.val > 0.05)
gg[order(-gg$AD.val),]
ff[order(-ff$AD.val),]
head(tile_DS8_expandedRange)
head(fff)
head(ff)
head(gg)
head(tile_DS8_expandedRange)
head(tile_DS7)
gg <- subset(tile_xxx, AD.val > 0.05)
tile_xxx
tile_xxx <- read.csv("testxxx.csv")
tile_xxx
head(tile_xxx)
head(tile_DS7)
all.equal(tile_DS7, tile_xxx)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/QuarantaLab/RNAseq_BP/")
library(biomaRt)
d <- read.csv("featureCounts_matrix_all.csv", header=T, sep=",")
#Rename columns
cols <- c("ensembl_gene_id", "SC01_day0_rep1", "SC01_day0_rep2", "SC01_day0_rep3",
"SC01_day3_rep1", "SC01_day3_rep2", "SC01_day3_rep3",
"SC01_day8_rep1", "SC01_day8_rep2", "SC01_day8_rep3",
"SC07_day0_rep1", "SC07_day0_rep2", "SC07_day0_rep3",
"SC07_day3_rep1", "SC07_day3_rep2", "SC07_day3_rep3",
"SC07_day8_rep1", "SC07_day8_rep2", "SC07_day8_rep3",
"SC10_day0_rep1", "SC10_day0_rep2", "SC10_day0_rep3",
"SC10_day3_rep1", "SC10_day3_rep2", "SC10_day3_rep3",
"SC10_day8_rep1", "SC10_day8_rep2", "SC10_day8_rep3")
names(d) <- cols
ensembl <- useMart("ensembl")
mart <- useDataset("hsapiens_gene_ensembl", mart = ensembl)
genes <- d$ensembl_gene_id
G_list <- getBM(attributes= c("ensembl_gene_id","hgnc_symbol"),
filters= "ensembl_gene_id",
values=genes,
mart=mart)
GE_data <- merge(d, G_list, by = "ensembl_gene_id")
d <- GE_data[, -1]
d <- d[c(28, seq(1:27))]
rownames(d) <- make.names(d$hgnc_symbol, unique = T)
d <- d[, 2:28]
countdata <- d
# baseline <- c(1,2,3,10,11,12,19,20,21)
# treat3d  <- c(4,5,6,13,14,15,22,23,24)
# treat8d  <- c(7,8,9,16,17,18,25,26,27)
# # define the groups by subclones
# sc01 <- c(baseline[1:3], treat3d[1:3], treat8d[1:3])
# sc07 <- c(baseline[4:6], treat3d[4:6], treat8d[4:6])
# sc10 <- c(baseline[7:9], treat3d[7:9], treat8d[7:9])
# # Get the countdata specific to conditions:
# # countdata <- countdata[,c(baseline)]
# rownames(countdata) <- d[,"ensembl_gene_id"]
head(countdata)
nrow(countdata)
ncol(countdata)
Ferr = read.delim("~/Documents/QuarantaLab/Ferroptosis/RNAseq/KEGGFerroptosis_hsa04216_06-25-18.txt", header=T, stringsAsFactors = F)
Ferr = Ferr[rowSums(is.na(Ferr)) == 0, ]
Ferr
library(reshape2)
library(ggplot2)
library(scales)
countdata_Fer <- countdata[Ferr$GeneName,]
Fer_match = colsplit(colnames(countdata_Fer), pattern = "_", names = c("Population", "Time", "Replicate"))
Fer_plot = cbind(Fer_match, t(countdata_Fer))
Fer_melt = melt(data = Fer_plot, id.vars = c("Population", "Time", "Replicate"), measure.vars = Ferr$GeneName)
Fer_dat = summarySE(Fer_melt, measurevar = "value", groupvars = c("Population", "Time", "variable"))
Fer_dat$Time = as.numeric(gsub("[^[:digit:]]","",Fer_dat$Time))
# Fer_dat_sub = subset(Fer_dat, variable %in% c("ITPR2","ITPR3"))
Fer_ggploted <- ggplot(Fer_dat, aes(x=Time, y=value, group = interaction(variable, Population))) +
geom_line(size=1.5, aes(color = Population)) +
geom_point(size = 1.5, aes(color = Population)) + facet_wrap(~variable, ncol = 5, scales = "free") +
geom_errorbar(aes(ymin=value-sd, ymax=value+sd, color = Population), width=.2, size=1.5) +
theme_bw() + xlab("Time (days)") + ylab("Gene Counts") +
ggtitle("Ferroptosis gene signature") +
theme(legend.text = element_text(size = 10), legend.position = "right",
plot.title = element_text(size = 14, hjust = 0.5, face = "bold"), axis.text=element_text(size=12),
legend.title = element_text(size=12,face="bold"),
axis.title=element_text(size=12,face="bold"))
Fer_ggploted
source('~/Documents/QuarantaLab/SummarySE.R')
countdata_Fer <- countdata[Ferr$GeneName,]
Fer_match = colsplit(colnames(countdata_Fer), pattern = "_", names = c("Population", "Time", "Replicate"))
Fer_plot = cbind(Fer_match, t(countdata_Fer))
Fer_melt = melt(data = Fer_plot, id.vars = c("Population", "Time", "Replicate"), measure.vars = Ferr$GeneName)
Fer_dat = summarySE(Fer_melt, measurevar = "value", groupvars = c("Population", "Time", "variable"))
Fer_dat$Time = as.numeric(gsub("[^[:digit:]]","",Fer_dat$Time))
# Fer_dat_sub = subset(Fer_dat, variable %in% c("ITPR2","ITPR3"))
Fer_ggploted <- ggplot(Fer_dat, aes(x=Time, y=value, group = interaction(variable, Population))) +
geom_line(size=1.5, aes(color = Population)) +
geom_point(size = 1.5, aes(color = Population)) + facet_wrap(~variable, ncol = 5, scales = "free") +
geom_errorbar(aes(ymin=value-sd, ymax=value+sd, color = Population), width=.2, size=1.5) +
theme_bw() + xlab("Time (days)") + ylab("Gene Counts") +
ggtitle("Ferroptosis gene signature") +
theme(legend.text = element_text(size = 10), legend.position = "right",
plot.title = element_text(size = 14, hjust = 0.5, face = "bold"), axis.text=element_text(size=12),
legend.title = element_text(size=12,face="bold"),
axis.title=element_text(size=12,face="bold"))
Fer_ggploted + ggsave("FerroptosisGeneSignature_rawCounts_SKMEL5sublines+treatment.pdf", width = 20, height = 25)
normdata_Fer <- as.data.frame(assay(rld))[Ferr$GeneName,]
Fer_match = colsplit(colnames(normdata_Fer), pattern = "_", names = c("Population", "Time", "Replicate"))
Fer_plot = cbind(Fer_match, t(normdata_Fer))
Fer_melt = melt(data = Fer_plot, id.vars = c("Population", "Time", "Replicate"), measure.vars = unique(colnames(Fer_plot))[4:42])
Fer_dat = summarySE(Fer_melt, measurevar = "value", groupvars = c("Population", "Time", "variable"))
Fer_dat$Time = as.numeric(gsub("[^[:digit:]]","",Fer_dat$Time))
# Fer_dat_sub = subset(Fer_dat, variable %in% c("ITPR2","ITPR3"))
Fer_ggploted <- ggplot(Fer_dat, aes(x=Time, y=value, group = interaction(variable, Population))) +
geom_line(size=1.5, aes(color = Population)) +
geom_point(size = 1.5, aes(color = Population)) + facet_wrap(~variable, ncol = 5, scales = "free") +
geom_errorbar(aes(ymin=value-sd, ymax=value+sd, color = Population), width=.2, size=1.5) +
theme_bw() + xlab("Time (days)") + ylab("Gene Counts") +
ggtitle("Ferroptosis gene signature") +
theme(legend.text = element_text(size = 10), legend.position = "right",
plot.title = element_text(size = 14, hjust = 0.5, face = "bold"), axis.text=element_text(size=12),
legend.title = element_text(size=12,face="bold"),
axis.title=element_text(size=12,face="bold"))
Fer_ggploted
getwd()
setwd('~/Documents/QuarantaLab/RNAseq_BP/')
# normdata_Fer
samples <- c("SC01_day0", "SC01_day3", "SC01_day8", "SC07_day0", "SC07_day3", "SC07_day8", "SC10_day0", "SC10_day3", "SC10_day8")
test <- normdata_Fer
test1 <- sapply(samples, function(x) rowMeans(test[, grep(x, colnames(test))]))
test2 <- as.data.frame(test1[complete.cases(test1),])
####
# Plot pheatmap (z-score) of gene list
test3 <- test2
test3$Gene <- rownames(test2)
test3_sub <- subset(test3, !Gene %in% c("ALOX15", "ACSL1", "ACSL3",
"ACSL5", "ACSL6", "TP53", "TF",
"CP", "MAP1LC3A", "MAP1LC3C",
"CYBB"))
test3_sub <- test3_sub[,1:9]
pheatmap(test3_sub,cluster_cols=FALSE, cluster_rows = F, scale = "row")
library(pheatmap)
samples <- c("SC01_day0", "SC01_day3", "SC01_day8", "SC07_day0", "SC07_day3", "SC07_day8", "SC10_day0", "SC10_day3", "SC10_day8")
test <- normdata_Fer
test1 <- sapply(samples, function(x) rowMeans(test[, grep(x, colnames(test))]))
test2 <- as.data.frame(test1[complete.cases(test1),])
####
# Plot pheatmap (z-score) of gene list
test3 <- test2
test3$Gene <- rownames(test2)
test3_sub <- subset(test3, !Gene %in% c("ALOX15", "ACSL1", "ACSL3",
"ACSL5", "ACSL6", "TP53", "TF",
"CP", "MAP1LC3A", "MAP1LC3C",
"CYBB"))
test3_sub <- test3_sub[,1:9]
pheatmap(test3_sub,cluster_cols=FALSE, cluster_rows = F, scale = "row")
normdata_Fer <- as.data.frame(assay(rld))[Ferr$GeneName,]
load("RLD_SC-1,7,10_0,3,8d_20180701.RData")
normdata_Fer <- as.data.frame(assay(rld))[Ferr$GeneName,]
Fer_match = colsplit(colnames(normdata_Fer), pattern = "_", names = c("Population", "Time", "Replicate"))
Fer_plot = cbind(Fer_match, t(normdata_Fer))
Fer_melt = melt(data = Fer_plot, id.vars = c("Population", "Time", "Replicate"), measure.vars = unique(colnames(Fer_plot))[4:42])
Fer_dat = summarySE(Fer_melt, measurevar = "value", groupvars = c("Population", "Time", "variable"))
Fer_dat$Time = as.numeric(gsub("[^[:digit:]]","",Fer_dat$Time))
# Fer_dat_sub = subset(Fer_dat, variable %in% c("ITPR2","ITPR3"))
Fer_ggploted <- ggplot(Fer_dat, aes(x=Time, y=value, group = interaction(variable, Population))) +
geom_line(size=1.5, aes(color = Population)) +
geom_point(size = 1.5, aes(color = Population)) + facet_wrap(~variable, ncol = 5, scales = "free") +
geom_errorbar(aes(ymin=value-sd, ymax=value+sd, color = Population), width=.2, size=1.5) +
theme_bw() + xlab("Time (days)") + ylab("Gene Counts") +
ggtitle("Ferroptosis gene signature") +
theme(legend.text = element_text(size = 10), legend.position = "right",
plot.title = element_text(size = 14, hjust = 0.5, face = "bold"), axis.text=element_text(size=12),
legend.title = element_text(size=12,face="bold"),
axis.title=element_text(size=12,face="bold"))
Fer_ggploted
library(pheatmap)
# normdata_Fer
samples <- c("SC01_day0", "SC01_day3", "SC01_day8", "SC07_day0", "SC07_day3", "SC07_day8", "SC10_day0", "SC10_day3", "SC10_day8")
test <- normdata_Fer
test1 <- sapply(samples, function(x) rowMeans(test[, grep(x, colnames(test))]))
test2 <- as.data.frame(test1[complete.cases(test1),])
####
# Plot pheatmap (z-score) of gene list
test3 <- test2
test3$Gene <- rownames(test2)
test3_sub <- subset(test3, !Gene %in% c("ALOX15", "ACSL1", "ACSL3",
"ACSL5", "ACSL6", "TP53", "TF",
"CP", "MAP1LC3A", "MAP1LC3C",
"CYBB"))
test3_sub <- test3_sub[,1:9]
pheatmap(test3_sub,cluster_cols=FALSE, cluster_rows = F, scale = "row")
test4_special <- subset(test3, Gene %in% c("SLC3A2", "SLC7A11", "GCLC", "GSS", "GPX4",
"ACSL1", "ACSL3", "ACSL4", "LPCAT3",
"TFRC", "STEAP3", "SLC11A2", "SLC39A8", "SLC39A14",
"PCBP2", "SLC40A1",
"HMOX1",
"PRNP",
"PCBP1", "FTH1", "MAP1LC3B", "ATG5", "ATG7", "NCOA4",
"VDAC2", "VDAC3"))
test4_special <- test4_special[,1:9]
pheatmap(test4_special,cluster_cols=FALSE, cluster_rows = F, scale = "row")
allFC <- function(DEProc,startcol,endcol){
GE_fold = DEProc[,-c(startcol:endcol)]
colvec = colnames(DEProc)[startcol:endcol]
#Last index is a self comparison and is removed
for(k in 1:(length(colvec)-1)){
#Start with column that is 1 away from index
for(j in (k+1):length(colvec)){
compnam = paste0(colvec[j],"/",colvec[k])
#Loop through each gene/row
for(i in 1:nrow(DEProc)){
f = DEProc[i,colvec[j]]
h = DEProc[i,colvec[k]]
GE_fold[i, compnam] = log2(f/h)
#Capture upregulation and down regulation
# if(f>h){
#   # GE_fold[i,compnam] = 2^(f-h)
#   GE_fold[i,compnam] = log2(f/h)
# }else{
#   # GE_fold[i,compnam] = -2^(h-f)
#   GE_fold[i,compnam] = log2(f/h)
#   }
#
}
}
}
return(GE_fold)
}
GE_fold <- allFC(test2, 1,9)
ImpRat = c("SC01_day3/SC01_day0", "SC01_day8/SC01_day0",
"SC07_day3/SC07_day0", "SC07_day8/SC07_day0",
"SC10_day3/SC10_day0", "SC10_day8/SC10_day0")
Imp_fold = GE_fold[,ImpRat]
Ferr = read.delim("~/Documents/QuarantaLab/Ferroptosis/RNAseq/KEGGFerroptosis_hsa04216_06-25-18.txt", header=T, stringsAsFactors = F)
Ferr_fold <- Imp_fold[rownames(Imp_fold) %in% Ferr$GeneName,]
colnames(Ferr_fold) <- c("SC01_short", "SC01_long", "SC07_short", "SC07_long", "SC10_short", "SC10_long")
Ferr_fold$SC01_base <- 0
Ferr_fold$SC07_base <- 0
Ferr_fold$SC10_base <- 0
Ferr_fold <- Ferr_fold[,c(7,1,2,8,3,4,9,5,6)]
Ferr_fold$Gene <- rownames(Ferr_fold)
Ferr_fold_melt <- melt(Ferr_fold, id.vars = "Gene")
Ferr_fold_melt$Gene <- factor(Ferr_fold_melt$Gene, levels = rev(Ferr$GeneName))
Ferr_fold_melt <- subset(Ferr_fold_melt, !Gene %in% c("ALOX15", "ACSL1", "ACSL3",
"ACSL5", "ACSL6", "TP53", "TF",
"CP", "MAP1LC3A", "MAP1LC3C",
"CYBB"))
ggplot(Ferr_fold_melt, aes(variable, Gene, fill = value)) +
geom_tile(color = "black") + theme_bw() +
scale_fill_gradientn(
colors=c("blue","white","red","red4"),
values=rescale(c(min(Ferr_fold_melt$value), 0, max(Ferr_fold_melt$value)/2, max(Ferr_fold_melt$value))),
limits=c(min(Ferr_fold_melt$value),max(Ferr_fold_melt$value)),
name = "Log2 Fold Change"
) + xlab("Population") +
theme(axis.text=element_text(size=14),
axis.text.x=element_text(angle = 90, hjust = 0),
axis.title=element_text(size=14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(Ferr_fold_melt, aes(variable, Gene, fill = value)) +
geom_tile(color = "black") + theme_bw() +
scale_fill_gradientn(
colors=c("blue","white","red","red4"),
values=rescale(c(min(Ferr_fold_melt$value), 0, max(Ferr_fold_melt$value)/2, max(Ferr_fold_melt$value))),
limits=c(min(Ferr_fold_melt$value),max(Ferr_fold_melt$value)),
name = "Log2 Fold Change"
) + xlab("Population") +
theme(axis.text=element_text(size=14),
axis.text.x=element_text(angle = 90, hjust = 0),
axis.title=element_text(size=14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggsave("Ferroptosis_FCHM_selected_wide.pdf", width = 16, height = 12)
ggplot(Ferr_fold_melt, aes(variable, Gene, fill = value)) +
geom_tile(color = "black") + theme_bw() +
scale_fill_gradientn(
colors=c("blue","white","red","red4"),
values=rescale(c(min(Ferr_fold_melt$value), 0, max(Ferr_fold_melt$value)/2, max(Ferr_fold_melt$value))),
limits=c(min(Ferr_fold_melt$value),max(Ferr_fold_melt$value)),
name = "Log2 Fold Change"
) + xlab("Population") +
theme(axis.text=element_text(size=14),
axis.text.x=element_text(angle = 90, hjust = 0),
axis.title=element_text(size=14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggsave("Ferroptosis_FCHM_selected_wide.pdf", width = 10, height = 6)
setwd('~/git/GES_2020/WES/')
# devtools::install_github(repo="knausb/vcfR")
library(reshape2)
library(ggplot2)
library(devtools)
library(vcfR)
library(RColorBrewer)
library(tidyr)
library(dplyr)
library(UpSetR)
library(scales)
library(waffle)
library(purrr)
library(stringr)
library(ggrepel)
library(forcats)
library(scales)
library(GenVisR)
library(ggbio)
# Numbers obtained from VCFtools and compiled into common dataset
num_muts <- read.csv("number_mutations.csv", header = T)
num_muts$Sample <- c("VU", "MGH", "BR1", "DS3",
"DS6", "DS7", "DS8", "DS9")
# Put data in format for ggplot
num_muts <- melt(num_muts, id.vars = "Sample")
num_muts = num_muts[!(num_muts$variable == "Total"),]
# Plot total mutation (breakdown by SNPs/InDels) counts
ggplot(num_muts, aes(x=Sample, y=value, fill = variable)) +
geom_bar(stat = "identity", color = "black") +
scale_fill_manual(values = c("grey40", "grey90"), labels = c("SNPs", "InDels")) +
theme_bw() + xlab("Population") + ylab("Number of Mutations") +
theme(legend.text = element_text(size = 12), legend.position = "right",
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
vcf <- read.vcfR("/Users/Corey/Documents/QuarantaLab/PC9/WXS/accre_vars/samples_called_vars_named.vcf.gz", verbose = TRUE)
dna <- ape::read.dna("/Volumes/quaranta/Data/WXS/bwa_ref_genome/Homo_sapiens_assembly38.fasta", format = "fasta")
gff <- read.table("/Volumes/quaranta/Data/RNAseq/PC9_scRNAseq/genes.gtf", sep="\t", quote="")
# Plot QC metrics for compiled dataset (all variants in all samples) - FIG. S3B
chrom <- create.chromR(name="Supercontig", vcf=vcf, seq=dna, ann=gff, verbose=TRUE)
chromoqc(chrom)
vcf <- read.vcfR("/Users/Corey/Documents/QuarantaLab/PC9/WXS/accre_vars/samples_called_vars_named.vcf.gz", verbose = TRUE)
dna <- ape::read.dna("/Volumes/quaranta/Data/WXS/bwa_ref_genome/Homo_sapiens_assembly38.fasta", format = "fasta")
gff <- read.table("/Volumes/quaranta/Data/RNAseq/PC9_scRNAseq/genes.gtf", sep="\t", quote="")
# Plot QC metrics for compiled dataset (all variants in all samples) - FIG. S3B
chrom <- create.chromR(name="Supercontig", vcf=vcf, seq=dna, ann=gff, verbose=TRUE)
chromoqc(chrom)
vcf <- read.vcfR("/Users/Corey/Documents/QuarantaLab/PC9/WXS/accre_vars/samples_called_vars_named.vcf.gz", verbose = TRUE)
dna <- ape::read.dna("/Volumes/quaranta/Data/WXS/bwa_ref_genome/Homo_sapiens_assembly38.fasta", format = "fasta")
gff <- read.table("/Volumes/quaranta/Data/RNAseq/PC9_scRNAseq/genes.gtf", sep="\t", quote="")
# Plot QC metrics for compiled dataset (all variants in all samples) - FIG. S3B
chrom <- create.chromR(name="Supercontig", vcf=vcf, seq=dna, ann=gff, verbose=TRUE)
chromoqc(chrom)
library(vcfR)
devtools::install_github(repo="knausb/vcfR")
devtools::install_github(repo="knausb/vcfR")
