sets.bar.color = c("brown", "deeppink", "gold", "darkorchid"),
mb.ratio = c(0.55, 0.45), nintersects = NA,
show.numbers = "no", point.size = 5, line.size = 0.5, mainbar.y.max = 106000,
mainbar.y.label = "Number of Mutations", sets.x.label = "Set Size", set_size.scale_max = 160000,
text.scale = c(2, 1.5, 2, 1.5, 2, 1))
### FIG. S5E - saved as 6x9 PDF
upset(fromExpression(upset_sublines), order.by = "freq",
sets.bar.color = c("brown", "seagreen", "deeppink", "gold", "darkorchid"),
mb.ratio = c(0.55, 0.45), nintersects = NA,
show.numbers = "no", point.size = 5, line.size = 0.5, mainbar.y.max = 106000,
mainbar.y.label = "Number of Mutations", sets.x.label = "Set Size", set_size.scale_max = 160000,
text.scale = c(2, 1.5, 2, 1.5, 2, 1))
setwd('/Volumes/quaranta/Data/WXS/vep_data')
setwd('/Volumes/quaranta/Data/WXS/vep_data')
getwd()
setwd()
setwd('/Volumes/quaranta/Data/WXS/vep_data')
setwd('/Volumes/quaranta/Data/WXS/PC9/vep_data')
test_s4_dedup <- test_s4[!duplicated(test_s4$X.Uploaded_variation), ]
test_s5_dedup <- test_s5[!duplicated(test_s5$X.Uploaded_variation), ]
test_s6_dedup <- test_s6[!duplicated(test_s6$X.Uploaded_variation), ]
test_s7_dedup <- test_s7[!duplicated(test_s7$X.Uploaded_variation), ]
test_s8_dedup <- test_s8[!duplicated(test_s8$X.Uploaded_variation), ]
test_all_noDS8 <- Reduce(merge, list(test4, test5, test6, test8))
test_s4_noDS8 <- test4[which(!(unlist(test4['X.Uploaded_variation']) %in% unlist(test_all_noDS8['X.Uploaded_variation'])) &
!(unlist(test4['X.Uploaded_variation']) %in% unlist(test_s4_5['X.Uploaded_variation'])) &
!(unlist(test4['X.Uploaded_variation']) %in% unlist(test_s4_6['X.Uploaded_variation'])) &
!(unlist(test4['X.Uploaded_variation']) %in% unlist(test_s4_8['X.Uploaded_variation']))),]
test_s5_noDS8 <- test5[which(!(unlist(test5['X.Uploaded_variation']) %in% unlist(test_all_noDS8['X.Uploaded_variation'])) &
!(unlist(test5['X.Uploaded_variation']) %in% unlist(test_s4_5['X.Uploaded_variation'])) &
!(unlist(test5['X.Uploaded_variation']) %in% unlist(test_s5_6['X.Uploaded_variation'])) &
!(unlist(test5['X.Uploaded_variation']) %in% unlist(test_s5_8['X.Uploaded_variation']))),]
test_s6_noDS8 <- test6[which(!(unlist(test6['X.Uploaded_variation']) %in% unlist(test_all_noDS8['X.Uploaded_variation'])) &
!(unlist(test6['X.Uploaded_variation']) %in% unlist(test_s4_6['X.Uploaded_variation'])) &
!(unlist(test6['X.Uploaded_variation']) %in% unlist(test_s5_6['X.Uploaded_variation'])) &
!(unlist(test6['X.Uploaded_variation']) %in% unlist(test_s6_8['X.Uploaded_variation']))),]
test_s8_noDS8 <- test8[which(!(unlist(test8['X.Uploaded_variation']) %in% unlist(test_all_noDS8['X.Uploaded_variation'])) &
!(unlist(test8['X.Uploaded_variation']) %in% unlist(test_s4_8['X.Uploaded_variation'])) &
!(unlist(test8['X.Uploaded_variation']) %in% unlist(test_s5_8['X.Uploaded_variation'])) &
!(unlist(test8['X.Uploaded_variation']) %in% unlist(test_s6_8['X.Uploaded_variation']))),]
test_s4_noDS8_dedup <- test_s4[!duplicated(test_s4_noDS8$X.Uploaded_variation), ]
test_s5_noDS8_dedup <- test_s5[!duplicated(test_s5_noDS8$X.Uploaded_variation), ]
test_s6_noDS8_dedup <- test_s6[!duplicated(test_s6_noDS8$X.Uploaded_variation), ]
test_s8_noDS8_dedup <- test_s8[!duplicated(test_s8_noDS8$X.Uploaded_variation), ]
setwd('~/Documents/QuarantaLab/GES_2020/WES/')
# Wheel plot
# from vcf_QC_filtering.R
muts_Chrom <- read.csv("mutations_byChromosome.csv", header = T)
colnames(muts_Chrom) <- c("Chromosome", "VU", "MGH", "BR1",
"DS3", "DS6", "DS7", "DS8", "DS9")
muts_Chrom_named <- muts_Chrom[,-1]
rownames(muts_Chrom_named) <- muts_Chrom[,1]
### Mean center mutation count across cohort (CLV, sublines) by chromosome
muts_Chrom_named_center <- t(center_apply(muts_Chrom_named))
head(muts_Chrom_named)
### Mean center mutation count across cohort (CLV, sublines) by chromosome
muts_Chrom_named_center_CLV <- t(center_apply(muts_Chrom_named[,c("VU", "MGH", "BR1")]))
### Function to mean-center mutation counts
center_apply <- function(x) {
apply(x, 1, function(y) y - mean(y))
}
### Mean center mutation count across cohort (CLV, sublines) by chromosome
muts_Chrom_named_center_CLV <- t(center_apply(muts_Chrom_named[,c("VU", "MGH", "BR1")]))
muts_Chrom_named_center_melt_CLV <- melt(data = muts_Chrom_named_center_CLV,
id.vars = rownames(muts_Chrom_named_center_CLV),
measure.vars = c("VU", "MGH", "BR1"))
muts_Chrom_named_center_sublines <- t(center_apply(muts_Chrom_named[,c(4,5,6,7,8)]))
muts_Chrom_named_center_melt_sublines <- melt(data = muts_Chrom_named_center_sublines,
id.vars = rownames(muts_Chrom_named_center_sublines),
measure.vars = c("DS3", "DS6", "DS7", "DS8", "DS9"))
#### Sublines excluding DS8
muts_Chrom_named_center_sublines <- t(center_apply(muts_Chrom_named[,c("DS3", "DS6", "DS7", "DS9")]))
muts_Chrom_named_center_melt_sublines <- melt(data = muts_Chrom_named_center_sublines,
id.vars = rownames(muts_Chrom_named_center_sublines),
measure.vars = c("DS3", "DS6", "DS7", "DS8", "DS9"))
#### Sublines including DS8
muts_Chrom_named_center_sublines <- t(center_apply(muts_Chrom_named[,c("DS3", "DS6", "DS7", "DS8", "DS9")]))
muts_Chrom_named_center_melt_sublines <- melt(data = muts_Chrom_named_center_sublines,
id.vars = rownames(muts_Chrom_named_center_sublines),
measure.vars = c("DS3", "DS6", "DS7", "DS8", "DS9"))
#### Sublines excluding DS8
muts_Chrom_named_center_sublines_noDS8 <- t(center_apply(muts_Chrom_named[,c("DS3", "DS6", "DS7", "DS9")]))
muts_Chrom_named_center_melt_sublines_noDS8 <- melt(data = muts_Chrom_named_center_sublines_noDS8,
id.vars = rownames(muts_Chrom_named_center_sublines_noDS8),
measure.vars = c("DS3", "DS6", "DS7", "DS8", "DS9"))
#### Sublines including DS8
muts_Chrom_named_center_sublines <- t(center_apply(muts_Chrom_named[,c("DS3", "DS6", "DS7", "DS8", "DS9")]))
muts_Chrom_named_center_melt_sublines <- melt(data = muts_Chrom_named_center_sublines,
id.vars = rownames(muts_Chrom_named_center_sublines),
measure.vars = c("DS3", "DS6", "DS7", "DS8", "DS9"))
library(tidyverse)
library(ggbio)
### Creating the circle plot
empty_bar <- 3 # Used for spacing
#### CLV
#### Set a number of 'empty bar' to add at the end of each group
data <- muts_Chrom_named_center_melt_CLV
# data <- muts_Chrom_named_center_melt_clones
colnames(data) <- c("group", "population", "value")
# to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# ggplot(data, aes(x=as.factor(id), y=value, fill=population)) + geom_bar(aes(x=as.factor(id), y=value, fill=population), stat="identity", alpha=0.5)
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=population)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=population), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = -3000, xend = start, yend = 3000), colour = "black", alpha=1, size=0.3, inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = -2000, xend = start, yend = -2000), colour = "black", alpha=1, size=0.3, inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = -1000, xend = start, yend = -1000), colour = "black", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 0, xend = start, yend = 0), colour = "black", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 1000, xend = start, yend = 1000), colour = "black", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each lines
annotate("text", x = rep(max(data$id),5), y = c(-3000, -2000, -1000, 0, 1000),
label = c("-3000", "-2000", "-1000", "0", "1000") ,
color="black", size=3 , angle=0, fontface="bold", hjust=1) +
geom_bar(aes(x=as.factor(id), y=value, fill=population), color = "black", size = 0.25, stat="identity", alpha=0.5) +
ylim(-3000,1250) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
# geom_text(data=label_data, aes(x=id, y=value+10, label=group, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = 0, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = 1250, label=group), colour = "black", alpha=0.8, size=6, fontface="bold", inherit.aes = FALSE) +
# scale_fill_manual(values = c("blue", "green", "red"))
scale_fill_manual(values = c("brown", "deeppink", "darkorchid", "seagreen", "gold"))
ggplot(data, aes(x=as.factor(id), y=value, fill=population)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=population), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = -3000, xend = start, yend = 3000), colour = "black", alpha=1, size=0.3, inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = -2000, xend = start, yend = -2000), colour = "black", alpha=1, size=0.3, inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = -1000, xend = start, yend = -1000), colour = "black", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 0, xend = start, yend = 0), colour = "black", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 1000, xend = start, yend = 1000), colour = "black", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each lines
annotate("text", x = rep(max(data$id),5), y = c(-3000, -2000, -1000, 0, 1000),
label = c("-3000", "-2000", "-1000", "0", "1000") ,
color="black", size=3 , angle=0, fontface="bold", hjust=1) +
geom_bar(aes(x=as.factor(id), y=value, fill=population), color = "black", size = 0.25, stat="identity", alpha=0.5) +
ylim(-3000,1250) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
# geom_text(data=label_data, aes(x=id, y=value+10, label=group, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = 0, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = 1250, label=group), colour = "black", alpha=0.8, size=6, fontface="bold", inherit.aes = FALSE) +
# scale_fill_manual(values = c("blue", "green", "red"))
scale_fill_manual(values = c("brown", "deeppink", "darkorchid", "seagreen", "gold"))
ggplot(data, aes(x=as.factor(id), y=value, fill=population)) + geom_bar(aes(x=as.factor(id), y=value, fill=population), stat="identity", alpha=0.5)
# # Make the plot
# p <- ggplot(data, aes(x=as.factor(id), y=value, fill=population)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=population), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = -3000, xend = start, yend = 3000), colour = "black", alpha=1, size=0.3, inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = -2000, xend = start, yend = -2000), colour = "black", alpha=1, size=0.3, inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = -1000, xend = start, yend = -1000), colour = "black", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 0, xend = start, yend = 0), colour = "black", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 1000, xend = start, yend = 1000), colour = "black", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each lines
annotate("text", x = rep(max(data$id),5), y = c(-3000, -2000, -1000, 0, 1000),
label = c("-3000", "-2000", "-1000", "0", "1000") ,
color="black", size=3 , angle=0, fontface="bold", hjust=1) +
geom_bar(aes(x=as.factor(id), y=value, fill=population), color = "black", size = 0.25, stat="identity", alpha=0.5) +
ylim(-3000,1250) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
# geom_text(data=label_data, aes(x=id, y=value+10, label=group, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = 0, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = 1250, label=group), colour = "black", alpha=0.8, size=6, fontface="bold", inherit.aes = FALSE) +
scale_fill_manual(values = c("blue", "green", "red"))
grid_data
#### CLV
#### Set a number of 'empty bar' to add at the end of each group
data <- muts_Chrom_named_center_melt_CLV
data
# data <- muts_Chrom_named_center_melt_clones
colnames(data) <- c("group", "population", "value")
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) <- colnames(data)
head(data)
head(to_add)
to_add$group <- rep(levels(data$group), each=empty_bar)
data$group
empty_bar
data <- rbind(data, to_add)
data
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
data
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
number_of_bar
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
label_data
# prepare a data frame for base lines
base_data <- data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
base_data
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
grid_data
head(data)
data
data %>%
group_by(group)
data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar)
data %>%
group_by(group)
data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar)
data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise()
data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
empty_bar <- 3 # Used for spacing
#### CLV
#### Set a number of 'empty bar' to add at the end of each group
data <- muts_Chrom_named_center_melt_sublines
# data <- muts_Chrom_named_center_melt_clones
colnames(data) <- c("group", "population", "value")
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
data
base_data
grid_data
data %>%
group_by(group)
data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar)
data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise()
data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
empty_bar <- 3 # Used for spacing
#### CLV
#### Set a number of 'empty bar' to add at the end of each group
data <- muts_Chrom_named_center_melt_CLV
# data <- muts_Chrom_named_center_melt_clones
colnames(data) <- c("group", "population", "value")
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
data
to_add
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
head(data)
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
head(label_data)
library(tidyverse)
library(ggbio)
data %>%
group_by(group)
data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar)
data %>%
group_by(group)
data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar)
data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise()
# library
library(tidyverse)
# Create dataset
data <- data.frame(
individual=paste( "Mister ", seq(1,60), sep=""),
group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,
value=sample( seq(10,100), 60, replace=T)
)
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 3
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),4), y = c(20, 40, 60, 80), label = c("20", "40", "60", "80") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
library(tidyverse)
# Create dataset
data <- data.frame(
individual=paste( "Mister ", seq(1,60), sep=""),
group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,
value=sample( seq(10,100), 60, replace=T)
)
data
empty_bar <- 3
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
label_data
data
base_data <- data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
base_data
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
grid_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
nrow(grid_data)
# library
library(tidyverse)
# Create dataset
data <- data.frame(
individual=paste( "Mister ", seq(1,60), sep=""),
group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,
value=sample( seq(10,100), 60, replace=T)
)
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 3
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),4), y = c(20, 40, 60, 80), label = c("20", "40", "60", "80") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
