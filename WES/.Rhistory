test2_dedup$Population <- NULL
test3_dedup$Population <- NULL
test4_dedup$Population <- NULL
test5_dedup$Population <- NULL
test6_dedup$Population <- NULL
test7_dedup$Population <- NULL
test8_dedup$Population <- NULL
test_all_8 <- Reduce(merge, list(test1_dedup, test2_dedup, test3_dedup,
test4_dedup, test5_dedup, test6_dedup,
test7_dedup, test8_dedup))
# 2 way comparisons - 28 instances - used for removing non-unique mutations
test_dedup_s1_2 <- merge(test1_dedup, test2_dedup)
test_dedup_s1_3 <- merge(test1_dedup, test3_dedup)
test_dedup_s1_4 <- merge(test1_dedup, test4_dedup)
test_dedup_s1_5 <- merge(test1_dedup, test5_dedup)
test_dedup_s1_6 <- merge(test1_dedup, test6_dedup)
test_dedup_s1_7 <- merge(test1_dedup, test7_dedup)
test_dedup_s1_8 <- merge(test1_dedup, test8_dedup)
test_dedup_s2_3 <- merge(test2_dedup, test3_dedup)
test_dedup_s2_4 <- merge(test2_dedup, test4_dedup)
test_dedup_s2_5 <- merge(test2_dedup, test5_dedup)
test_dedup_s2_6 <- merge(test2_dedup, test6_dedup)
test_dedup_s2_7 <- merge(test2_dedup, test7_dedup)
test_dedup_s2_8 <- merge(test2_dedup, test8_dedup)
test_dedup_s3_4 <- merge(test3_dedup, test4_dedup)
test_dedup_s3_5 <- merge(test3_dedup, test5_dedup)
test_dedup_s3_6 <- merge(test3_dedup, test6_dedup)
test_dedup_s3_7 <- merge(test3_dedup, test7_dedup)
test_dedup_s3_8 <- merge(test3_dedup, test8_dedup)
test_dedup_s4_5 <- merge(test4_dedup, test5_dedup)
test_dedup_s4_6 <- merge(test4_dedup, test6_dedup)
test_dedup_s4_7 <- merge(test4_dedup, test7_dedup)
test_dedup_s4_8 <- merge(test4_dedup, test8_dedup)
test_dedup_s5_6 <- merge(test5_dedup, test6_dedup)
test_dedup_s5_7 <- merge(test5_dedup, test7_dedup)
test_dedup_s5_8 <- merge(test5_dedup, test8_dedup)
test_dedup_s6_7 <- merge(test6_dedup, test7_dedup)
test_dedup_s6_8 <- merge(test6_dedup, test8_dedup)
test_dedup_s7_8 <- merge(test7_dedup, test8_dedup)
test_s1_dedup_all8 <- test1_dedup[which(!(unlist(test1_dedup['X.Uploaded_variation']) %in% unlist(test_all_8['X.Uploaded_variation'])) &
!(unlist(test1_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s1_2['X.Uploaded_variation'])) &
!(unlist(test1_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s1_3['X.Uploaded_variation'])) &
!(unlist(test1_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s1_4['X.Uploaded_variation'])) &
!(unlist(test1_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s1_5['X.Uploaded_variation'])) &
!(unlist(test1_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s1_6['X.Uploaded_variation'])) &
!(unlist(test1_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s1_7['X.Uploaded_variation'])) &
!(unlist(test1_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s1_8['X.Uploaded_variation']))),]
test_s2_dedup_all8 <- test2_dedup[which(!(unlist(test2_dedup['X.Uploaded_variation']) %in% unlist(test_all_8['X.Uploaded_variation'])) &
!(unlist(test2_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s1_2['X.Uploaded_variation'])) &
!(unlist(test2_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s2_3['X.Uploaded_variation'])) &
!(unlist(test2_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s2_4['X.Uploaded_variation'])) &
!(unlist(test2_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s2_5['X.Uploaded_variation'])) &
!(unlist(test2_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s2_6['X.Uploaded_variation'])) &
!(unlist(test2_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s2_7['X.Uploaded_variation'])) &
!(unlist(test2_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s2_8['X.Uploaded_variation']))),]
test_s3_dedup_all8 <- test3_dedup[which(!(unlist(test3_dedup['X.Uploaded_variation']) %in% unlist(test_all_8['X.Uploaded_variation'])) &
!(unlist(test3_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s1_3['X.Uploaded_variation'])) &
!(unlist(test3_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s2_3['X.Uploaded_variation'])) &
!(unlist(test3_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s3_4['X.Uploaded_variation'])) &
!(unlist(test3_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s3_5['X.Uploaded_variation'])) &
!(unlist(test3_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s3_6['X.Uploaded_variation'])) &
!(unlist(test3_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s3_7['X.Uploaded_variation'])) &
!(unlist(test3_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s3_8['X.Uploaded_variation']))),]
test_s4_dedup_all8 <- test4_dedup[which(!(unlist(test4_dedup['X.Uploaded_variation']) %in% unlist(test_all_8['X.Uploaded_variation'])) &
!(unlist(test4_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s1_4['X.Uploaded_variation'])) &
!(unlist(test4_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s2_4['X.Uploaded_variation'])) &
!(unlist(test4_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s3_4['X.Uploaded_variation'])) &
!(unlist(test4_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s4_5['X.Uploaded_variation'])) &
!(unlist(test4_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s4_6['X.Uploaded_variation'])) &
!(unlist(test4_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s4_7['X.Uploaded_variation'])) &
!(unlist(test4_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s4_8['X.Uploaded_variation']))),]
test_s5_dedup_all8 <- test5_dedup[which(!(unlist(test5_dedup['X.Uploaded_variation']) %in% unlist(test_all_8['X.Uploaded_variation'])) &
!(unlist(test5_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s1_5['X.Uploaded_variation'])) &
!(unlist(test5_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s2_5['X.Uploaded_variation'])) &
!(unlist(test5_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s3_5['X.Uploaded_variation'])) &
!(unlist(test5_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s4_5['X.Uploaded_variation'])) &
!(unlist(test5_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s5_6['X.Uploaded_variation'])) &
!(unlist(test5_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s5_7['X.Uploaded_variation'])) &
!(unlist(test5_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s5_8['X.Uploaded_variation']))),]
test_s6_dedup_all8 <- test6_dedup[which(!(unlist(test6_dedup['X.Uploaded_variation']) %in% unlist(test_all_8['X.Uploaded_variation'])) &
!(unlist(test6_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s1_6['X.Uploaded_variation'])) &
!(unlist(test6_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s2_6['X.Uploaded_variation'])) &
!(unlist(test6_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s3_6['X.Uploaded_variation'])) &
!(unlist(test6_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s4_6['X.Uploaded_variation'])) &
!(unlist(test6_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s5_6['X.Uploaded_variation'])) &
!(unlist(test6_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s6_7['X.Uploaded_variation'])) &
!(unlist(test6_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s6_8['X.Uploaded_variation']))),]
test_s7_dedup_all8 <- test7_dedup[which(!(unlist(test7_dedup['X.Uploaded_variation']) %in% unlist(test_all_8['X.Uploaded_variation'])) &
!(unlist(test7_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s1_7['X.Uploaded_variation'])) &
!(unlist(test7_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s2_7['X.Uploaded_variation'])) &
!(unlist(test7_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s3_7['X.Uploaded_variation'])) &
!(unlist(test7_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s4_7['X.Uploaded_variation'])) &
!(unlist(test7_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s5_7['X.Uploaded_variation'])) &
!(unlist(test7_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s6_7['X.Uploaded_variation'])) &
!(unlist(test7_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s7_8['X.Uploaded_variation']))),]
test_s8_dedup_all8 <- test8_dedup[which(!(unlist(test8_dedup['X.Uploaded_variation']) %in% unlist(test_all_8['X.Uploaded_variation'])) &
!(unlist(test8_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s1_8['X.Uploaded_variation'])) &
!(unlist(test8_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s2_8['X.Uploaded_variation'])) &
!(unlist(test8_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s3_8['X.Uploaded_variation'])) &
!(unlist(test8_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s4_8['X.Uploaded_variation'])) &
!(unlist(test8_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s5_8['X.Uploaded_variation'])) &
!(unlist(test8_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s6_8['X.Uploaded_variation'])) &
!(unlist(test8_dedup['X.Uploaded_variation']) %in% unlist(test_dedup_s7_8['X.Uploaded_variation']))),]
# Load package needed to identify potentially impactful mutations
library(dndscv)
getDatFormat <- function(data) {
res <- str_match(data, "([^_]*)_(.*?)_(.*?)/(.*?)(/|$)")
}
muts_VU_all8 <- as.data.frame(do.call(rbind, lapply(test_s1_dedup_all8$X.Uploaded_variation, getDatFormat)))[,1:5]
names(muts_VU_all8) <- c("SampleID", "chr", "pos", "ref", "mut")
muts_VU_all8$SampleID <- "VU"
muts_MGH_all8 <- as.data.frame(do.call(rbind, lapply(test_s2_dedup_all8$X.Uploaded_variation, getDatFormat)))[,1:5]
names(muts_MGH_all8) <- c("SampleID", "chr", "pos", "ref", "mut")
muts_MGH_all8$SampleID <- "MGH"
muts_BR1_all8 <- as.data.frame(do.call(rbind, lapply(test_s3_dedup_all8$X.Uploaded_variation, getDatFormat)))[,1:5]
names(muts_BR1_all8) <- c("SampleID", "chr", "pos", "ref", "mut")
muts_BR1_all8$SampleID <- "BR1"
muts_DS3_all8 <- as.data.frame(do.call(rbind, lapply(test_s4_dedup_all8$X.Uploaded_variation, getDatFormat)))[,1:5]
names(muts_DS3_all8) <- c("SampleID", "chr", "pos", "ref", "mut")
muts_DS3_all8$SampleID <- "DS3"
muts_DS6_all8 <- as.data.frame(do.call(rbind, lapply(test_s5_dedup_all8$X.Uploaded_variation, getDatFormat)))[,1:5]
names(muts_DS6_all8) <- c("SampleID", "chr", "pos", "ref", "mut")
muts_DS6_all8$SampleID <- "DS6"
muts_DS7_all8 <- as.data.frame(do.call(rbind, lapply(test_s6_dedup_all8$X.Uploaded_variation, getDatFormat)))[,1:5]
names(muts_DS7_all8) <- c("SampleID", "chr", "pos", "ref", "mut")
muts_DS7_all8$SampleID <- "DS7"
muts_DS8_all8 <- as.data.frame(do.call(rbind, lapply(test_s7_dedup_all8$X.Uploaded_variation, getDatFormat)))[,1:5]
names(muts_DS8_all8) <- c("SampleID", "chr", "pos", "ref", "mut")
muts_DS8_all8$SampleID <- "DS8"
muts_DS9_all8 <- as.data.frame(do.call(rbind, lapply(test_s8_dedup_all8$X.Uploaded_variation, getDatFormat)))[,1:5]
names(muts_DS9_all8) <- c("SampleID", "chr", "pos", "ref", "mut")
muts_DS9_all8$SampleID <- "DS9"
muts_all8 <- do.call("rbind", list(muts_VU_all8, muts_MGH_all8,
muts_BR1_all8, muts_DS3_all8,
muts_DS6_all8, muts_DS7_all8,
muts_DS8_all8, muts_DS9_all8))
dndsout_all8 = dndscv(muts_all8, refdb="../../Volumes/Transcend/RefCDS_human_GRCh38.p12.rda",
cv=NULL, max_muts_per_gene_per_sample = 5)
all8_keymuts <- subset(dndsout_all8$sel_cv, pglobal_cv < 0.05)
impGenes_all8 <- subset(dndsout_all8$annotmuts, gene %in% all8_keymuts$gene_name)
dndsout_all8 = dndscv(muts_all8, refdb="/Volumes/Transcend/RefCDS_human_GRCh38.p12.rda",
cv=NULL, max_muts_per_gene_per_sample = 5)
all8_keymuts <- subset(dndsout_all8$sel_cv, pglobal_cv < 0.05)
impGenes_all8 <- subset(dndsout_all8$annotmuts, gene %in% all8_keymuts$gene_name)
library(data.table)
impGenes_all8$impact[impGenes_all8$impact == "no-SNV" & !is.na(impGenes_all8$ntchange)] <- sapply(str_split(impGenes_all8$ntchange[impGenes_all8$impact == "no-SNV" & !is.na(impGenes_all8$ntchange)], "-",3), function(x) x[3])
impGenes_all8 <- subset(impGenes_all8, impact != "no-SNV")
## Remove gene with mutations in 2+ samples (MUC3A, GOLGA6L7, MADCAM1, GOLGA8F, CHD4, GOLGA6L4, IGFN1) - for reviewers
muts_remove <- c("MUC3A","GOLGA6L7","MADCAM1","GOLGA8F","CHD4","GOLGA6L4","IGFN1")
impGenes_all8 <- subset(impGenes_all8, !(gene %in% muts_remove))
CLV <- c("VU", "MGH", "BR1")
impGenes_CLV <- subset(impGenes_all8, sampleID %in% CLV)
## Setting the color setup for plots below
matches <- c("delfrshift" = rainbow(7)[1], "delinframe" = rainbow(7)[2], "Essential_Splice" = rainbow(7)[3],
"insfrshift" = rainbow(7)[4], "Missense" = rainbow(7)[5], "Nonsense" = rainbow(7)[6],
"Synonymous" = rainbow(7)[7], "None" = "white")
names <- c("delfrshift", "delinframe" , "Essential_Splice", "insfrshift",
"Missense", "Nonsense", "Synonymous", "None")
labels <- c("Frameshift Deletion", "Inframe Deletion", "Splice Site", "Frameshift Insertion",
"Missense", "Nonsense", "Synonymous", "None")
## Creating dataframe-mutation grid (for heatmap plotting)
fillInDF_CLV_dNdS <- expand.grid(unique(impGenes_all8$gene), CLV)
names(fillInDF_CLV_dNdS) <- c("gene", "sampleID")
fillInDF_CLV_dNdS$interaction <- paste0(fillInDF_CLV_dNdS$gene, ":", fillInDF_CLV_dNdS$sampleID)
## Creating compiled dataframe of mutations, amino acids, and impact
impGenes_CLV$interaction <- paste0(impGenes_CLV$gene, ":", impGenes_CLV$sampleID)
## Compile new dataframe for each mutated gene, CLV, and impact
Genes_CLV_dNdS <- merge(fillInDF_CLV_dNdS, impGenes_CLV, c("interaction"), all.x = TRUE)
Genes_CLV_dNdS <- Genes_CLV_dNdS[,c("gene.x", "sampleID.x", "impact")]
Genes_CLV_dNdS[is.na(Genes_CLV_dNdS)] <- "None"
names(Genes_CLV_dNdS) <- c("gene", "sampleID", "impact")
## Tally number of mutations for each sample-gene pair
CG_CLV_factor_dNdS <- Genes_CLV_dNdS %>% modify_if(is.character, as.factor)
CG_CLV_factor_dNdS_count <- CG_CLV_factor_dNdS %>%
group_by(gene, sampleID, impact) %>%
tally()
## Add shift and height column (annotations to heatmap)
CG_CLV_dNdS_factor_p <- data.table(CG_CLV_factor_dNdS_count)
CG_CLV_dNdS_factor_p[, shift:=(1:(.N))/.N - 1/(2 * .N) - 1/2, by=list(gene, sampleID)]
CG_CLV_dNdS_factor_p[, height:=1/.N, by=list(gene, sampleID)]
## Add character and numeric indecies for heatmap plotting
k <- unique(c(as.character(CG_CLV_dNdS_factor_p$sampleID)))
l <- as.numeric(factor(CG_CLV_dNdS_factor_p$sampleID, levels=k))
## Create gene count dataframe (for vertical heatmap bar plot)
CG_CLV_dNdS_geneCount <- subset(CG_CLV_factor_dNdS, impact != "None") %>%
group_by(gene, impact) %>%
tally()
### Change from factor to character (for plots)
CG_CLV_dNdS_geneCount$gene <- as.character(CG_CLV_dNdS_geneCount$gene)
CG_CLV_dNdS_geneCount <- as.data.frame(lapply(CG_CLV_dNdS_geneCount, unlist))
## Plot vertical barplot for each gene (gene and impact classified)
ggplot(CG_CLV_dNdS_geneCount, aes(x = gene, y = n)) +
geom_bar(stat = "identity", color = "black", aes(fill = as.factor(impact)), size = 0.25) +
theme_bw() + labs(x = "Gene", y = "Number of Mutations") +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
scale_y_continuous(breaks=seq(0, 5, by = 1)) +
scale_x_discrete(limits = rev(levels(CG_CLV_dNdS_factor_p$gene))) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
# axis.text.x = element_text(size = 8, angle = 90, hjust = 0),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12),
axis.title.x=element_blank(), axis.text.x=element_blank(),
axis.ticks.x=element_blank(), panel.border = element_blank())
ggplot(CG_CLV_dNdS_geneCount, aes(x = gene, y = n)) +
geom_bar(stat = "identity", color = "black", aes(fill = as.factor(impact)), size = 0.25) +
theme_bw() + labs(x = "Gene", y = "Number of Mutations") +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
scale_y_continuous(breaks=seq(0, 5, by = 1))
ggplot(CG_CLV_dNdS_geneCount, aes(x = gene, y = n)) +
geom_bar(stat = "identity", color = "black", aes(fill = as.factor(impact)), size = 0.25)
ggplot() +
geom_bar(CG_CLV_dNdS_geneCount, aes(x = gene, y = n), stat = "identity",
color = "black", aes(fill = as.factor(impact)), size = 0.25)
CG_CLV_dNdS_geneCount
ggplot() +
geom_bar(as.data.frame(CG_CLV_dNdS_geneCount), aes(x = gene, y = n), stat = "identity",
color = "black", aes(fill = as.factor(impact)), size = 0.25)
ggplot() +
geom_bar(CG_CLV_dNdS_geneCount, stat = "identity", color = "black",
aes(x = gene, y = n, fill = as.factor(impact)), size = 0.25)
ggplot() +
geom_bar(CG_CLV_dNdS_geneCount, stat = "identity", color = "black",
aes(x = gene, y = n, fill = as.factor(impact)), size = 0.25) +
theme_bw() + labs(x = "Gene", y = "Number of Mutations") +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
scale_y_continuous(breaks=seq(0, 5, by = 1)) +
scale_x_discrete(limits = rev(levels(CG_CLV_dNdS_factor_p$gene))) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
# axis.text.x = element_text(size = 8, angle = 90, hjust = 0),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12),
axis.title.x=element_blank(), axis.text.x=element_blank(),
axis.ticks.x=element_blank(), panel.border = element_blank())
plt_test <- ggplot(CG_CLV_dNdS_geneCount, aes(x = gene, y = n)) +
geom_bar(stat = "identity", color = "black", aes(fill = as.factor(impact)), size = 0.25) +
theme_bw() + labs(x = "Gene", y = "Number of Mutations") +
scale_fill_manual(values = matches, breaks = names, labels = labels)
plt_test_leg
plt_test <- ggplot() +
geom_bar(CG_CLV_dNdS_geneCount, stat = "identity", color = "black",
aes(x = gene, y = n, fill = as.factor(impact)), size = 0.25) +
theme_bw() + labs(x = "Gene", y = "Number of Mutations") +
scale_fill_manual(values = matches, breaks = names, labels = labels)
plt_test_leg
ggplot() +
geom_bar(CG_CLV_dNdS_geneCount, stat = "identity", color = "black",
aes(x = gene, y = n, fill = as.factor(impact)), size = 0.25)
ggplot() +
geom_bar(CG_CLV_dNdS_geneCount, stat = "identity", color = "black",
aes(x = gene, y = n, fill = as.factor(impact)), size = 0.25) +
theme_bw() + labs(x = "Gene", y = "Number of Mutations")
ggplot() +
geom_bar(CG_CLV_dNdS_geneCount, stat = "identity", color = "black",
aes(x = gene, y = n, fill = as.factor(impact)), size = 0.25) +
theme_bw() + labs(x = "Gene", y = "Number of Mutations") +
scale_fill_manual(values = matches, breaks = names, labels = labels)
plt_test <- ggplot() +
geom_bar(CG_CLV_dNdS_geneCount, stat = "identity", color = "black",
aes(x = gene, y = n, fill = as.factor(impact)), size = 0.25) +
theme_bw() + labs(x = "Gene", y = "Number of Mutations") +
scale_fill_manual(values = matches, breaks = names, labels = labels)
plt_test_leg <- ggpubr::get_legend(plt_test)
ggpubr::as_ggplot(plt_test_leg)
## Plot horizontal barplot for each sample (sample and impact classified)
CLV_plot <- impGenes_CLV %>% count(sampleID, impact)
CLV_plot <- as.data.frame(lapply(CLV_plot, unlist))
ggplot(CLV_plot,
aes(x = factor(sampleID, levels = c("BR1", "MGH", "VU")),
y = n)) +
geom_bar(stat = "identity", color = "black", aes(fill = as.factor(impact)), size = 0.125, width = 0.99) +
theme_bw() + labs(x = "Sample", y = "Number of Mutations") +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
scale_y_continuous(breaks=seq(0, 30, by = 10)) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
axis.text.x = element_blank(),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12),
panel.border = element_blank())
ggplot() +
geom_bar(CLV_plot, stat = "identity", color = "black",
aes(x = factor(sampleID, levels = c("BR1", "MGH", "VU")),
y = n, fill = as.factor(impact)), size = 0.125, width = 0.99) +
theme_bw() + labs(x = "Sample", y = "Number of Mutations") +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
scale_y_continuous(breaks=seq(0, 30, by = 10)) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
axis.text.x = element_blank(),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12),
panel.border = element_blank())
## Add character and numeric indecies for heatmap plotting
e <- rev(unique(c(as.character(CG_CLV_dNdS_factor_p$sampleID))))
f <- as.numeric(factor(CG_CLV_dNdS_factor_p$sampleID, levels=e))
## Plot heatmap of mutations and CLV (colored by impact and number of mutations)
### Separated bars within sample bars are if multiple mutation impacts in same CLV
CG_CLV_dNdS_factor_p <- as.data.frame(lapply(CG_CLV_dNdS_factor_p, unlist))
ggplot(CG_CLV_dNdS_factor_p, (aes(x = gene, y = f + shift,
fill = as.factor(impact), alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = as.factor(impact), alpha = n)) + theme_bw() +
labs(x = "Genes", y = "Sample") +
scale_alpha(range = c(1,1), limits = c(1,3), name = "Number of\nMutations") +
scale_y_continuous(breaks = c(1,2,3), labels = e) +
coord_flip() +
scale_fill_manual(values = matches, breaks = names,
labels = labels) +
theme(
panel.grid.major = element_blank(), #panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
panel.border=element_rect(fill = NA, colour="white",size=0.2),
axis.text.y = element_blank(),
# axis.text.x = element_text(size = 6, angle = 90, hjust = 0),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=16),
legend.title = element_text(size=12), axis.title=element_text(size=16))
sublines <- c("DS3", "DS6", "DS7", "DS8", "DS9")
impGenes_sublines <- subset(impGenes_all8, sampleID %in% sublines)
## Creating dataframe-mutation grid (for heatmap plotting)
fillInDF_sublines_dNdS <- expand.grid(unique(impGenes_all8$gene), sublines)
names(fillInDF_sublines_dNdS) <- c("gene", "sampleID")
fillInDF_sublines_dNdS$interaction <- paste0(fillInDF_sublines_dNdS$gene, ":", fillInDF_sublines_dNdS$sampleID)
## Creating compiled dataframe of mutations, amino acids, and impact
impGenes_sublines$interaction <- paste0(impGenes_sublines$gene, ":", impGenes_sublines$sampleID)
## Compile new dataframe for each mutated gene, sublines, and impact
Genes_sublines_dNdS <- merge(fillInDF_sublines_dNdS, impGenes_sublines, c("interaction"), all.x = TRUE)
Genes_sublines_dNdS <- Genes_sublines_dNdS[,c("gene.x", "sampleID.x", "impact")]
Genes_sublines_dNdS[is.na(Genes_sublines_dNdS)] <- "None"
names(Genes_sublines_dNdS) <- c("gene", "sampleID", "impact")
## Tally number of mutations for each sample-gene pair
CG_sublines_factor_dNdS <- Genes_sublines_dNdS %>% modify_if(is.character, as.factor)
CG_sublines_factor_dNdS_count <- CG_sublines_factor_dNdS %>%
group_by(gene, sampleID, impact) %>%
tally()
## Add shift and height column (annotations to heatmap)
CG_sublines_dNdS_factor_p <- data.table(CG_sublines_factor_dNdS_count)
CG_sublines_dNdS_factor_p[, shift:=(1:(.N))/.N - 1/(2 * .N) - 1/2, by=list(gene, sampleID)]
CG_sublines_dNdS_factor_p[, height:=1/.N, by=list(gene, sampleID)]
## Add character and numeric indecies for heatmap plotting
k <- unique(c(as.character(CG_sublines_dNdS_factor_p$sampleID)))
l <- as.numeric(factor(CG_sublines_dNdS_factor_p$sampleID, levels=k))
## Create gene count dataframe (for vertical heatmap bar plot)
CG_sublines_dNdS_geneCount <- subset(CG_sublines_factor_dNdS, impact != "None") %>%
group_by(gene, impact) %>%
tally()
### Change from factor to character (for plots)
CG_sublines_dNdS_geneCount$gene <- as.character(CG_sublines_dNdS_geneCount$gene)
CG_sublines_dNdS_geneCount <- as.data.frame(lapply(CG_sublines_dNdS_geneCount, unlist))
## Plot vertical barplot for each gene (gene and impact classified)
ggplot(CG_sublines_dNdS_geneCount, aes(x = gene, y = n)) +
geom_bar(stat = "identity", color = "black", aes(fill = as.factor(impact)), size = 0.25) +
theme_bw() + labs(x = "Gene", y = "Number of Mutations") +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
scale_y_continuous(breaks=seq(0, 5, by = 1)) + ylim(0,5) +
scale_x_discrete(limits = rev(levels(CG_sublines_dNdS_factor_p$gene))) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
# axis.text.x = element_text(size = 8, angle = 90, hjust = 0),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12),
axis.title.x=element_blank(), axis.text.x=element_blank(),
axis.ticks.x=element_blank(), panel.border = element_blank())
ggplot() +
geom_bar(CG_sublines_dNdS_geneCount, stat = "identity", color = "black",
aes(x = gene, y = n, fill = as.factor(impact)), size = 0.25) +
theme_bw() + labs(x = "Gene", y = "Number of Mutations") +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
scale_y_continuous(breaks=seq(0, 5, by = 1)) + ylim(0,5) +
scale_x_discrete(limits = rev(levels(CG_sublines_dNdS_factor_p$gene))) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
# axis.text.x = element_text(size = 8, angle = 90, hjust = 0),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12),
axis.title.x=element_blank(), axis.text.x=element_blank(),
axis.ticks.x=element_blank(), panel.border = element_blank())
ggplot() +
geom_bar(sublines_plot, stat = "identity", color = "black",
aes(x = factor(sampleID, levels = rev(sublines)),
y = n, fill = as.factor(impact)), size = 0.125, width = 0.99) +
theme_bw() + labs(x = "Sample", y = "Number of Mutations") +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
scale_y_continuous(breaks=seq(0, 30, by = 10)) + ylim(0,30) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
axis.text.x = element_blank(),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12),
panel.border = element_blank())
sublines_plot <- impGenes_sublines %>% count(sampleID, impact)
sublines_plot <- as.data.frame(lapply(sublines_plot, unlist))
ggplot() +
geom_bar(sublines_plot, stat = "identity", color = "black",
aes(x = factor(sampleID, levels = rev(sublines)),
y = n, fill = as.factor(impact)), size = 0.125, width = 0.99) +
theme_bw() + labs(x = "Sample", y = "Number of Mutations") +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
scale_y_continuous(breaks=seq(0, 30, by = 10)) + ylim(0,30) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
axis.text.x = element_blank(),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12),
panel.border = element_blank())
## Add character and numeric indecies for heatmap plotting
e <- rev(unique(c(as.character(CG_sublines_dNdS_factor_p$sampleID))))
f <- as.numeric(factor(CG_sublines_dNdS_factor_p$sampleID, levels=e))
## Plot heatmap of mutations and sublines (colored by impact and number of mutations)
### Separated bars within sample bars are if multiple mutation impacts in same sublines
CG_sublines_dNdS_factor_p <- as.data.frame(lapply(CG_sublines_dNdS_factor_p, unlist))
ggplot(CG_sublines_dNdS_factor_p, (aes(x = gene, y = f + shift,
fill = as.factor(impact), alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = as.factor(impact), alpha = n)) + theme_bw() +
labs(x = "Genes", y = "Sample") +
scale_alpha(range = c(1,1), limits = c(1,5), name = "Number of\nMutations") +
scale_y_continuous(breaks = rev(seq(5)), labels = e) +
coord_flip() +
scale_fill_manual(values = matches, breaks = names,
labels = labels) +
theme(
panel.grid.major = element_blank(), #panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
panel.border=element_rect(fill = NA, colour="white",size=0.2),
axis.text.y = element_blank(),
# axis.text.x = element_text(size = 6, angle = 90, hjust = 0),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=16),
legend.title = element_text(size=12), axis.title=element_text(size=16))
### Plot Cancer Associated Genes
cancerGenes <- c("EGFR", "MET", "HER2", "BRAF", "NF1", "RAF1", "KRAS", "NRAS", "HRAS", "MAP2K2",
"AKT1", "PIK3CA", "PIK3CB", "TSC1", "ALK", "APC", "EPHA2", "EPHA3", "EPHA4",
"ERBB4", "FGFR1", "ITK", "JAK2", "JAK3", "LRP1B", "LTK", "ROS1", "STK11", "TP53", "RB1",
"ABCB5", "CFTR", "DACH1", "RELN", "CDKN2A", "DDR2", "DLEC1", "IRF1", "KEAP1", "MAP2K1",
"MAP3K8", "NRG1", "PPP2R1B", "PRKN", "PTEN", "RASSF1", "RET", "RIT1", "SLC22A18", "SMARCA4")
all8 <- c("BR1", "MGH", "VU", "DS3", "DS6", "DS7", "DS8", "DS9")
fillInDF_all8_CG <- expand.grid(cancerGenes, all8)
names(fillInDF_all8_CG) <- c("gene", "sampleID")
fillInDF_all8_CG$interaction <- paste0(fillInDF_all8_CG$gene, ":", fillInDF_all8_CG$sampleID)
# fillInDF_CLV_CG <- subset(fillInDF_all8_CG, sampleID %in% CLV)
# fillInDF_sublines_CG <- subset(fillInDF_all8_CG, sampleID %in% sublines)
all8_all_CG <- subset(dndsout_all8$annotmuts, gene %in% cancerGenes)
all8_all_CG$impact[all8_all_CG$impact == "no-SNV" & !is.na(all8_all_CG$ntchange)] <- sapply(str_split(all8_all_CG$ntchange[all8_all_CG$impact == "no-SNV" & !is.na(all8_all_CG$ntchange)], "-",3), function(x) x[3])
all8_all_CG <- subset(all8_all_CG, impact != "no-SNV")
all8_all_CG$interaction <- paste0(all8_all_CG$gene, ":", all8_all_CG$sampleID)
# CLV_CG <- subset(all8_all_CG, sampleID %in% CLV)
# sublines_CG <- subset(all8_all_CG, sampleID %in% sublines)
cancerGenes_all8 <- merge(fillInDF_all8_CG, all8_all_CG, c("interaction"), all.x = TRUE)
cancerGenes_all8 <- cancerGenes_all8[,c("gene.x", "sampleID.x", "impact")]
cancerGenes_all8[is.na(cancerGenes_all8)] <- "None"
names(cancerGenes_all8) <- c("gene", "sampleID", "impact")
test_f <- cancerGenes_all8 %>% modify_if(is.character, as.factor)
test_f <- test_f %>%
group_by(gene, sampleID, impact) %>%
tally()
# Plot together
test_f_all_p <- data.table(test_f)
test_f_all_p[, shift:=(1:(.N))/.N - 1/(2 * .N) - 1/2, by=list(gene, sampleID)]
test_f_all_p[, height:=1/.N, by=list(gene, sampleID)]
i <- unique(c(as.character(test_f_all_p$sampleID)))
j <- as.numeric(factor(test_f_all_p$sampleID, levels=i))
ggplot(test_f_all_p, (aes(x = gene, y = j + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw() +
labs(x = "Unique Cancer Genes", y = "Sample") +
scale_alpha(range = c(1,1)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7,8),
labels = i) +
coord_flip() +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
theme(
panel.grid.major = element_blank(), #panel.grid.minor = element_blank(),
legend.position = "right", axis.ticks = element_blank(),
panel.border=element_rect(fill = NA, colour="white",size=0.2),
axis.text.y = element_text(size = 12), legend.text = element_text(size = 16),
# axis.text.x = element_text(size = 6, angle = 90, hjust = 0),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=16),
legend.title = element_text(size=12), axis.title=element_text(size=16))
# Subset into CLV and sublines
test_f_CLV <- subset(test_f, sampleID %in% CLV)
test_f_sublines <- subset(test_f, sampleID %in% sublines)
# Plot separately
## CLV
test_f_CLV_p <- data.table(test_f_CLV)
test_f_CLV_p[, shift:=(1:(.N))/.N - 1/(2 * .N) - 1/2, by=list(gene, sampleID)]
test_f_CLV_p[, height:=1/.N, by=list(gene, sampleID)]
i <- unique(c(as.character(test_f_CLV_p$sampleID)))
j <- as.numeric(factor(test_f_CLV_p$sampleID, levels=i))
ggplot(test_f_CLV_p, (aes(x = gene, y = j + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw() +
labs(x = "Unique Cancer Genes", y = "Sample") +
scale_alpha(range = c(1,1)) +
scale_y_continuous(breaks = c(1,2,3),
labels = i) +
coord_flip() +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
theme(
panel.grid.major = element_blank(), #panel.grid.minor = element_blank(),
legend.position = "right", axis.ticks = element_blank(),
panel.border=element_rect(fill = NA, colour="white",size=0.2),
axis.text.y = element_text(size = 12),
# axis.text.x = element_text(size = 6, angle = 90, hjust = 0),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=16),
legend.title = element_text(size=12), axis.title=element_text(size=16))
