CG_sublines_in3_factor <- CG_sublines_in3_factor %>%
group_by(gene, sampleID, impact) %>%
tally()
CG_sublines_in3_factor_p <- data.table(CG_sublines_in3_factor)
CG_sublines_in3_factor_p[, shift:=(1:(.N))/.N - 1/(2 * .N) - 1/2, by=list(gene, sampleID)]
CG_sublines_in3_factor_p[, height:=1/.N, by=list(gene, sampleID)]
i <- unique(c(as.character(CG_sublines_in3_factor_p$sampleID)))
j <- as.numeric(factor(CG_sublines_in3_factor_p$sampleID, levels=i))
ggplot(CG_sublines_in3_factor_p, (aes(x = gene, y = j + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw() +
labs(x = "Cancer Genes", y = "Sample") +
scale_alpha(range = c(0.5,1), limits = c(1,12)) +
scale_y_continuous(breaks = c(1,2,3,4,5),
labels = i) +
coord_flip() +
# scale_x_discrete(limits = rev(levels(CG_CLV_factor_p$gene))) +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
panel.border=element_rect(fill = NA, colour="white",size=0.2),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12))
i
j
ggplot(CG_sublines_in3_factor_p, (aes(x = gene, y = ordered(j, levels=rev(j)) + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw() +
labs(x = "Cancer Genes", y = "Sample") +
scale_alpha(range = c(0.5,1), limits = c(1,12)) +
scale_y_continuous(breaks = c(1,2,3,4,5),
labels = i) +
coord_flip() +
# scale_x_discrete(limits = rev(levels(CG_CLV_factor_p$gene))) +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
panel.border=element_rect(fill = NA, colour="white",size=0.2),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12))
ordered(j, levels=rev(j))
ggplot(CG_sublines_in3_factor_p, (aes(x = gene, y = ordered(j, levels=rev(levels)) + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw() +
labs(x = "Cancer Genes", y = "Sample") +
scale_alpha(range = c(0.5,1), limits = c(1,12)) +
scale_y_continuous(breaks = c(1,2,3,4,5),
labels = i) +
coord_flip() +
# scale_x_discrete(limits = rev(levels(CG_CLV_factor_p$gene))) +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
panel.border=element_rect(fill = NA, colour="white",size=0.2),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12))
ordered(j)
j + shift
ggplot(CG_sublines_in3_factor_p, (aes(x = gene, y = j + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw() +
labs(x = "Cancer Genes", y = "Sample") +
scale_alpha(range = c(0.5,1), limits = c(1,12)) +
scale_y_continuous(breaks = c(1,2,3,4,5),
labels = i, trans = "reverse") +
coord_flip() +
# scale_x_discrete(limits = rev(levels(CG_CLV_factor_p$gene))) +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
panel.border=element_rect(fill = NA, colour="white",size=0.2),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12))
CG_sublines_in3_factor_p
ggplot(CG_sublines_in3_factor_p, (aes(x = gene, y = j + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw()
ggplot(CG_sublines_in3_factor_p, (aes(x = gene, y = j + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw() +
labs(x = "Cancer Genes", y = "Sample") +
scale_alpha(range = c(0.5,1), limits = c(1,12)) +
scale_y_continuous(breaks = c(1,2,3,4,5),
labels = i)
ggplot(CG_sublines_in3_factor_p, (aes(x = gene, y = j + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw() +
labs(x = "Cancer Genes", y = "Sample") +
scale_alpha(range = c(0.5,1), limits = c(1,12)) +
scale_y_continuous(breaks = c(1,2,3,4,5),
labels = i) +
coord_flip()
ggplot(CG_sublines_in3_factor_p, (aes(x = gene, y = j + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw() +
labs(x = "Cancer Genes", y = "Sample") +
scale_alpha(range = c(0.5,1), limits = c(1,12)) +
scale_y_continuous(breaks = c(1,2,3,4,5),
labels = i) +
coord_flip() +
scale_x_discrete(limits = rev(levels(CG_CLV_factor_p$gene)))
ggplot(CG_sublines_in3_factor_p, (aes(x = gene, y = j + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw() +
labs(x = "Cancer Genes", y = "Sample") +
scale_alpha(range = c(0.5,1), limits = c(1,12)) +
scale_y_continuous(breaks = c(1,2,3,4,5),
labels = i) +
coord_flip() +
scale_x_discrete(limits = rev(levels(CG_sublines_in3_dNdS_factor_p$gene)))
ggplot(CG_sublines_in3_factor_p, (aes(x = gene, y = j + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw() +
labs(x = "Cancer Genes", y = "Sample") +
scale_alpha(range = c(0.5,1), limits = c(1,12)) +
scale_y_continuous(breaks = c(1,2,3,4,5),
labels = i,
limits = rev(levels(j))) +
coord_flip() +
# scale_x_discrete(limits = rev(levels(CG_CLV_factor_p$gene))) +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
panel.border=element_rect(fill = NA, colour="white",size=0.2),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12))
CG_sublines_in3_factor_p
as.data.frame(CG_sublines_in3_factor_p)
as.data.frame(CG_sublines_in3_factor_p)[c(150:250),]
ggplot(as.data.frame(CG_sublines_in3_factor_p), (aes(x = gene, y = j + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw() +
labs(x = "Cancer Genes", y = "Sample") +
scale_alpha(range = c(0.5,1), limits = c(1,12)) +
scale_y_continuous(breaks = c(1,2,3,4,5),
labels = i,
limits = rev(levels(j))) +
coord_flip() +
# scale_x_discrete(limits = rev(levels(CG_CLV_factor_p$gene))) +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
panel.border=element_rect(fill = NA, colour="white",size=0.2),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12))
ggplot(as.data.frame(CG_sublines_in3_factor_p), (aes(x = gene, y = j + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw() +
labs(x = "Cancer Genes", y = "Sample") +
scale_alpha(range = c(0.5,1), limits = c(1,12)) +
scale_y_continuous(breaks = c(1,2,3,4,5),
labels = i) +
coord_flip() +
# scale_x_discrete(limits = rev(levels(CG_CLV_factor_p$gene))) +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
panel.border=element_rect(fill = NA, colour="white",size=0.2),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12))
CG_CLV_dNdS_factor_p
CG_CLV_factor_dNdS
cancerGenes <- c("EGFR", "MET", "HER2", "BRAF", "NF1", "RAF1", "KRAS", "NRAS", "HRAS", "MAP2K2",
"AKT1", "PIK3CA", "PIK3CB", "TSC1", "ALK", "APC", "EPHA2", "EPHA3", "EPHA4",
"ERBB4", "FGFR1", "ITK", "JAK2", "JAK3", "LRP1B", "LTK", "ROS1", "STK11", "TP53", "RB1",
"ABCB5", "CFTR", "DACH1", "RELN", "CDKN2A", "DDR2", "DLEC1", "IRF1", "KEAP1", "MAP2K1",
"MAP3K8", "NRG1", "PPP2R1B", "PRKN", "PTEN", "RASSF1", "RET", "RIT1", "SLC22A18", "SMARCA4")
CLV <- c("BR1", "MGH", "VU")
fillInDF_CLV <- expand.grid(cancerGenes, CLV)
names(fillInDF_CLV) <- c("gene", "sampleID")
fillInDF_CLV$interaction <- paste0(fillInDF_CLV$gene, ":", fillInDF_CLV$sampleID)
CLV_all_CG <- subset(dndsout_CLV$annotmuts, gene %in% cancerGenes)
CLV_all_CG$interaction <- paste0(CLV_all_CG$gene, ":", CLV_all_CG$sampleID)
cancerGenes_CLV <- merge(fillInDF_CLV, CLV_all_CG, c("interaction"), all.x = TRUE)
cancerGenes_CLV <- cancerGenes_CLV[,c("gene.x", "sampleID.x", "impact")]
cancerGenes_CLV[is.na(cancerGenes_CLV)] <- "None"
# cancerGenes_clones_noDS8$n[is.na(cancerGenes_clones_noDS8$n)] <- 0
# cancerGenes_clones_noDS8 <- cancerGenes_clones_noDS8[,c(2,3,6)]
names(cancerGenes_CLV) <- c("gene", "sampleID", "impact")
CG_CLV_factor <- cancerGenes_CLV %>% modify_if(is.character, as.factor)
CG_CLV_factor <- CG_CLV_factor %>%
group_by(gene, sampleID, impact) %>%
tally()
CG_CLV_factor_p <- data.table(CG_CLV_factor)
CG_CLV_factor_p[, shift:=(1:(.N))/.N - 1/(2 * .N) - 1/2, by=list(gene, sampleID)]
CG_CLV_factor_p[, height:=1/.N, by=list(gene, sampleID)]
i <- unique(c(as.character(CG_CLV_factor_p$sampleID)))
j <- as.numeric(factor(CG_CLV_factor_p$sampleID, levels=i))
ggplot(CG_CLV_factor_p, (aes(x = gene, y = j + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw() +
labs(x = "Cancer Genes", y = "Sample") +
scale_alpha(range = c(0.5,1), limits = c(1,12)) +
scale_y_continuous(breaks = c(1,2,3),
labels = i) + coord_flip() +
scale_x_discrete(limits = rev(levels(CG_CLV_factor_p$gene))) +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
panel.border=element_rect(fill = NA, colour="white",size=0.2),
# axis.text.x = element_text(size = 8, angle = 90, hjust = 0),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12))
CG_CLV_factor_p
CG_sublines_in3_factor_p
i <- unique(c(as.character(CG_CLV_factor_p$sampleID)))
j <- as.numeric(factor(CG_CLV_factor_p$sampleID, levels=i))
i
j
ggplot(CG_CLV_factor_p, (aes(x = gene, y = j + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw() +
labs(x = "Cancer Genes", y = "Sample") +
scale_alpha(range = c(0.5,1), limits = c(1,12)) +
scale_y_continuous(breaks = c(1,2,3),
labels = i) + coord_flip() +
# scale_x_discrete(limits = rev(levels(CG_CLV_factor_p$gene))) +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
panel.border=element_rect(fill = NA, colour="white",size=0.2),
# axis.text.x = element_text(size = 8, angle = 90, hjust = 0),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12))
ggplot(as.data.frame(CG_sublines_in3_factor_p), (aes(x = gene, y = j + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw() +
labs(x = "Cancer Genes", y = "Sample") +
scale_alpha(range = c(0.5,1), limits = c(1,12)) +
scale_y_continuous(breaks = c(1,2,3,4,5),
labels = i) + coord_flip() +
scale_x_discrete(limits = rev(levels(CG_CLV_factor_p$gene))) +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
panel.border=element_rect(fill = NA, colour="white",size=0.2),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12))
ggplot(CG_sublines_in3_factor_p, (aes(x = gene, y = j + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw() +
labs(x = "Cancer Genes", y = "Sample") +
scale_alpha(range = c(0.5,1), limits = c(1,12)) +
scale_y_continuous(breaks = c(1,2,3,4,5),
labels = i) +
coord_flip() +
# scale_x_discrete(limits = rev(levels(CG_CLV_factor_p$gene))) +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
panel.border=element_rect(fill = NA, colour="white",size=0.2),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12)) +
ggsave("uniqueCancerMuts_sublines_mutationHM.pdf", width = 5, height = 7)
i <- unique(c(as.character(CG_sublines_in3_factor_p$sampleID)))
j <- as.numeric(factor(CG_sublines_in3_factor_p$sampleID, levels=i))
ggplot(CG_sublines_in3_factor_p, (aes(x = gene, y = j + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw() +
labs(x = "Cancer Genes", y = "Sample") +
scale_alpha(range = c(0.5,1), limits = c(1,12)) +
scale_y_continuous(breaks = c(1,2,3,4,5),
labels = i) +
coord_flip() +
# scale_x_discrete(limits = rev(levels(CG_CLV_factor_p$gene))) +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
panel.border=element_rect(fill = NA, colour="white",size=0.2),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12)) +
ggsave("uniqueCancerMuts_sublines_mutationHM.pdf", width = 5, height = 7)
ggplot(CG_sublines_in3_factor_p, (aes(x = gene, y = j + shift,
fill = impact, alpha = n, height = height))) +
geom_tile(color = "black", aes(fill = impact, alpha = n)) + theme_bw() +
labs(x = "Cancer Genes", y = "Sample") +
scale_alpha(range = c(0.5,1), limits = c(1,12)) +
scale_y_continuous(breaks = c(1,2,3,4,5),
labels = i) +
coord_flip() +
scale_x_discrete(limits = rev(levels(CG_CLV_factor_p$gene))) +
scale_fill_manual(values = matches, breaks = names, labels = labels) +
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none", axis.ticks = element_blank(),
panel.border=element_rect(fill = NA, colour="white",size=0.2),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 12, hjust = 0.5), axis.text=element_text(size=12),
legend.title = element_text(size=12), axis.title=element_text(size=12)) +
ggsave("uniqueCancerMuts_sublines_mutationHM.pdf", width = 5, height = 7)
getwd()
head(r)
head(r@meta.data)
unique(r@meta.data$orig.ident)
unique(r@meta.data$res.1.8)
unique(r@meta.data$tree.ident)
## tSNE plots (Figure 1c-e)
plot.seed <- 32907098
tsne.emb <- GetCellEmbeddings(object = r, reduction = "tsne")
#pdf(paste(file.handle, "tsne_plot.pdf", sep = "_"), width = 4, height = 4)
PlotDims(tsne.emb, sample.groups = clusters, pt.size = 0.75, alpha.plot = 0.5, label.size = 6, do.label = T,
show.legend = F, seed = plot.seed)
#dev.off()
#pdf(paste(file.handle, "tsne_plot_nolabel.pdf", sep = "_"), width = 4, height = 4)
PlotDims(tsne.emb, sample.groups = clusters, pt.size = 0.75, alpha.plot = 0.5, label.size = 0, do.label = F,
show.legend = F, seed = plot.seed)
#dev.off()
#pdf(paste(file.handle, "tsne_plot_batch.pdf", sep = "_"), width = 4, height = 4)
batch <- factor(r@meta.data$batch)
# names(batch) <- r@cell.names
names(batch) <- colnames(r)
batch <- batch[rownames(tsne.emb)]
PlotDims(tsne.emb, sample.groups = batch, pt.size = 1, alpha.plot = 0.5, label.size = 8, do.label = T,
show.legend = F, seed = plot.seed)
#dev.off()
## tSNE plot overlay
# plot.seed <- 32907098
# tsne.emb <- Embeddings(object = r, reduction = "tsne")
TF <- "NEUROD1"
tf.groups <- as.character(clusters); names(tf.groups) <- names(clusters);
tf.groups[names(tf.groups) %in% genotypes.list[[TF]]] <- TF
tf.groups[!names(tf.groups) %in% genotypes.list[[TF]]] <- ""
tf.groups <- factor(tf.groups)
#pdf(paste0(file.handle, "_tsne_plot_", TF, ".pdf"), width = 3, height = 3)
PlotDims(tsne.emb, sample.groups = tf.groups, pt.size = 0.35, alpha.plot = 0.4, label.size = 0, do.label = T,
show.legend = F, seed = plot.seed) + scale_color_manual(values = c("grey", "red")) + ggtitle(TF)
#dev.off()
PlotDims(tsne.emb, sample.groups = clusters, pt.size = 0.75, alpha.plot = 0.5, label.size = 6, do.label = T,
show.legend = F, seed = plot.seed)
PlotDims(tsne.emb, sample.groups = clusters, pt.size = 0.75, alpha.plot = 0.5, label.size = 0, do.label = F,
show.legend = F, seed = plot.seed)
PlotDims(tsne.emb, sample.groups = batch, pt.size = 1, alpha.plot = 0.5, label.size = 8, do.label = T,
show.legend = F, seed = plot.seed)
TF <- "NEUROD1"
tf.groups <- as.character(clusters); names(tf.groups) <- names(clusters);
tf.groups[names(tf.groups) %in% genotypes.list[[TF]]] <- TF
tf.groups[!names(tf.groups) %in% genotypes.list[[TF]]] <- ""
tf.groups <- factor(tf.groups)
#pdf(paste0(file.handle, "_tsne_plot_", TF, ".pdf"), width = 3, height = 3)
PlotDims(tsne.emb, sample.groups = tf.groups, pt.size = 0.35, alpha.plot = 0.4, label.size = 0, do.label = T,
show.legend = F, seed = plot.seed) + scale_color_manual(values = c("grey", "red")) + ggtitle(TF)
## tSNE plots (Figure 1c-e)
plot.seed <- 32907098
tsne.emb <- GetCellEmbeddings(object = r, reduction = "tsne")
#pdf(paste(file.handle, "tsne_plot.pdf", sep = "_"), width = 4, height = 4)
PlotDims(tsne.emb, sample.groups = clusters, pt.size = 0.75, alpha.plot = 0.5, label.size = 6, do.label = T,
show.legend = F, seed = plot.seed)
#dev.off()
#pdf(paste(file.handle, "tsne_plot_nolabel.pdf", sep = "_"), width = 4, height = 4)
PlotDims(tsne.emb, sample.groups = clusters, pt.size = 0.75, alpha.plot = 0.5, label.size = 0, do.label = F,
show.legend = F, seed = plot.seed)
#dev.off()
#pdf(paste(file.handle, "tsne_plot_batch.pdf", sep = "_"), width = 4, height = 4)
batch <- factor(r@meta.data$batch)
# names(batch) <- r@cell.names
names(batch) <- colnames(r)
batch <- batch[rownames(tsne.emb)]
PlotDims(tsne.emb, sample.groups = batch, pt.size = 1, alpha.plot = 0.5, label.size = 8, do.label = T,
show.legend = F, seed = plot.seed)
#dev.off()
## tSNE plot overlay
# plot.seed <- 32907098
# tsne.emb <- Embeddings(object = r, reduction = "tsne")
TF <- "NEUROD1"
tf.groups <- as.character(clusters); names(tf.groups) <- names(clusters);
tf.groups[names(tf.groups) %in% genotypes.list[[TF]]] <- TF
tf.groups[!names(tf.groups) %in% genotypes.list[[TF]]] <- ""
tf.groups <- factor(tf.groups)
#pdf(paste0(file.handle, "_tsne_plot_", TF, ".pdf"), width = 3, height = 3)
PlotDims(tsne.emb, sample.groups = tf.groups, pt.size = 0.35, alpha.plot = 0.4, label.size = 0, do.label = T,
show.legend = F, seed = plot.seed) + scale_color_manual(values = c("grey", "red")) + ggtitle(TF)
#dev.off()
umap <- RunUMAP(r, reduction.use = "pca", dims.use = 1:10)
umap.emb <- GetCellEmbeddings(object = r, reduction = "umap")
DimPlot(umap, reduction.use = "umap")
DimPlot(umap, reduction.use = "umap", sample.groups = clusters, pt.size = 0.75, alpha.plot = 0.5, label.size = 6, do.label = T, show.legend = F, seed = plot.seed)
PlotDims(tsne.emb, sample.groups = clusters, pt.size = 0.75, alpha.plot = 0.5, label.size = 6, do.label = T,
show.legend = F, seed = plot.seed)
head(r)
head(r@data)
umap <- RunUMAP(r@data, reduction.use = "pca", dims.use = 1:10)
umap <- RunUMAP(r, reduction.use = "pca", dims.use = 1:10)
DimPlot(umap, reduction.use = "umap", sample.groups = clusters, pt.size = 0.75, alpha.plot = 0.5, label.size = 6, do.label = T, show.legend = F, seed = plot.seed)
r <- RunUMAP(r, reduction.use = "pca", dims.use = 1:10)
DimPlot(umap, reduction.use = "umap", sample.groups = clusters, pt.size = 0.75, alpha.plot = 0.5, label.size = 6, do.label = T, show.legend = F, seed = plot.seed)
head(r@meta.data)
plot.seed <- 32907098
tsne.emb <- GetCellEmbeddings(object = r, reduction = "tsne")
#pdf(paste(file.handle, "tsne_plot.pdf", sep = "_"), width = 4, height = 4)
PlotDims(tsne.emb, sample.groups = clusters, pt.size = 0.75, alpha.plot = 0.5, label.size = 6, do.label = T,
show.legend = F, seed = plot.seed)
head(tsne.emb)
umap.emb <- GetCellEmbeddings(r, reduction.type = "umap")
head(umap.emb)
PlotDims(tsne.emb, sample.groups = batch, pt.size = 1, alpha.plot = 0.5, label.size = 8, do.label = T,
show.legend = F, seed = plot.seed)
PlotDims(tsne.emb, sample.groups = tf.groups, pt.size = 0.35, alpha.plot = 0.4, label.size = 0, do.label = T,
show.legend = F, seed = plot.seed) + scale_color_manual(values = c("grey", "red")) + ggtitle(TF)
umap.emb <- GetCellEmbeddings(r, reduction.type = "umap")
DimPlot(umap, reduction.use = "umap", sample.groups = clusters, pt.size = 0.75, alpha.plot = 0.5, label.size = 6, do.label = T, show.legend = F, seed = plot.seed)
DimPlot(umap.emb, sample.groups = clusters, pt.size = 0.75, alpha.plot = 0.5, label.size = 6, do.label = T, show.legend = F, seed = plot.seed)
umap.emb <- GetCellEmbeddings(r, reduction.type = "umap")
DimPlot(umap.emb, sample.groups = clusters, pt.size = 0.75, alpha.plot = 0.5, label.size = 6, do.label = T, show.legend = F, seed = plot.seed)
PlotDims(umap.emb, sample.groups = clusters, pt.size = 0.75, alpha.plot = 0.5, label.size = 6, do.label = T, show.legend = F, seed = plot.seed)
?Seurat::PlotDims
?PlotDims
DimPlot(dat_singlet, reduction.use = "umap")
DimPlot(r, reduction.use = "umap")
DimPlot(r, reduction.use = "umap", sample.groups = clusters, pt.size = 0.75, alpha.plot = 0.5, label.size = 0, do.label = F, show.legend = F, seed = plot.seed)
DimPlot(r, reduction.use = "umap")
DimPlot(r, reduction.use = "tsne")
DimPlot(r, reduction.use = "pca")
DimPlot(r, reduction.use = "umap")
?RunUMAP
?expSmooth
setwd("~/Documents/QuarantaLab/PC9_DRC_JR/")
library(lubridate)
library(gplots)
library(diprate)
library(tidyxl)
library(readxl)
library(dplyr)
require(ggplot2)
require(Hmisc)
source("SumSE.R") # Summarize function to get the summary statistics;
source("functionsDRC.R")
source("utMA.r")
setwd("PC9 Untreated and Erl 3uM/")
?expSmooth
setwd("~/Documents/QuarantaLab/PC9_DRC_JR/")
library(lubridate)
library(gplots)
library(diprate)
library(tidyxl)
library(readxl)
library(dplyr)
require(ggplot2)
require(Hmisc)
source("SumSE.R") # Summarize function to get the summary statistics;
source("functionsDRC.R")
source("utMA.r")
setwd("PC9 Untreated and Erl 3uM/")
# ============================================================================================================
# ============================================================================================================
untreatCVdata = read.csv("Parental-VU-MGH-BR1_Clones-DS1-3-4-6-7-8-9_DMSO.csv", header=T)
erlCVdata = read.csv("Parental-VU-MGH-BR1_Clones-DS1-3-4-6-7-8-9_Erl-3uM.csv", header=T)
untreatPC9 = cellCountCV(untreatCVdata,cellnumcol = "Cell.Nucleus", normPos = 1)
untreatPfile="Platemaps/Untreat PC9 plate map.xlsx"
erlPC9 = cellCountCV(erlCVdata,cellnumcol = "Cell.Nucleus", normPos = 1)
erlPfile="Platemaps/Erlotnib PC9 plate map.xlsx"
#Add labels to row-col entries
untreatGroups = getPlateGroupString96(untreatPfile)
untreatPC9L = styleDrugPlate96(untreatPfile, untreatPC9)
erlGroups = getPlateGroupString96(erlPfile)
erlPC9L = styleDrugPlate96(erlPfile, erlPC9)
dcErlPC9L = remDrugChange(erlPC9L)
erlESmooth = expSmooth(erlPC9L, alpha = 0.5, countcol = "Count")
erlESmooth = expSmooth(dcErlPC9L, alpha = 0.6, countcol = "Count")
d = dcErlPC9L
a <- sapply(unique(d$Well), function(w) round(utMA(d[d$Well==w,'Count'],d[d$Well==w,'Time'],tau=16),0))
af = data.frame(a)
df = data.frame()
for(i in 1:length(unique(d$Well))){
shub = subset(d,d$Well%in%unique(d$Well)[i])
for(j in 1:length(unique(d$Time))){
shub[shub$Time==unique(d$Time)[j], "sCount"] = af[j,i]
}
df = rbind(df,shub)
}
erlPC9SMA = df
#Calculate Normalized Log2 population growth curves
unPC9Stat = compNL2Stats(untreatPC9L, untreatGroups, time=0)
erlPC9Stat = compNL2Stats(dcErlPC9L, erlGroups, time=0)
erlPC9Stat2 = compNL2Stats(erlPC9SMA, erlGroups, CountVar = "sCount", time=0)
erlESmooth_cutout <- subset(erlESmooth, !erlESmooth$Sample %in% c("BR1","DS8"))
erlESmooth_BR1 <- subset(erlESmooth, Sample %in% "BR1")
erlESmooth_BR1 <- subset(erlESmooth_BR1, Time < 125)
erlESmooth_DS8 <- subset(erlESmooth, Sample %in% "DS8")
erlESmooth_DS8 <- subset(erlESmooth_DS8, Time < 125)
erlESmooth_cut <- rbind(erlESmooth_cutout, erlESmooth_BR1, erlESmooth_DS8)
erlPC9Stat3 = compNL2Stats(erlESmooth_cut, erlGroups, CountVar = "esCount", time = 0)
erlESmooth_renorm <- erlESmooth_cutout
erlPC9Stat3_renorm = compNL2Stats(erlESmooth_renorm, erlGroups, CountVar = "esCount", time = 125.1458)
erlPC9Stat3_renorm = subset(erlPC9Stat3_renorm, Time > 124)
unique(erlPC9Stat3)
unique(erlPC9Stat3$Time)
Seurat
session_info()
